{"file_contents":{"replit.md":{"content":"# Project Setup Documentation\n\n## Overview\nThis is a full-stack application with a Node.js/Express backend and React frontend dashboard. The project was imported from GitHub and configured to work in the Replit environment.\n\n## Architecture\n- **Backend**: Node.js/Express API server on port 3000 (localhost)\n- **Frontend**: Vite/React dashboard on port 5000 (0.0.0.0)\n- **Database**: MongoDB (configured but not yet connected)\n- **Additional**: Expo/React Native app in `frontend/app/` (not actively running)\n\n## Project Structure\n```\n├── backend/                 # Express API server\n│   ├── src/\n│   │   ├── config/         # Database, environment config\n│   │   ├── controllers/    # API controllers\n│   │   ├── middleware/     # Auth, error handling\n│   │   ├── models/         # Database models\n│   │   ├── routes/         # API routes\n│   │   └── server.js       # Main server file\n│   └── package.json\n├── frontend/\n│   ├── app/               # Expo/React Native mobile app\n│   └── dashboard/         # Vite/React admin dashboard (active)\n└── tests/\n```\n\n## Setup Completed\n- ✅ Node.js dependencies installed\n- ✅ Frontend configured for Replit proxy (0.0.0.0:5000)\n- ✅ Backend configured for localhost:3000\n- ✅ Workflow set up for dashboard frontend\n- ✅ Deployment configuration added\n\n## Current Status\n- Frontend dashboard is running and accessible via web preview\n- Backend is configured but requires MongoDB connection setup\n- Ready for development and testing\n\n## Recent Changes (Sep 19, 2025)\n- Configured Vite to serve on 0.0.0.0:5000 for Replit compatibility\n- Updated backend to use localhost:3000\n- Added npm scripts to backend package.json\n- Set up deployment configuration for autoscale\n- Created Dashboard workflow running the frontend\n\n## User Preferences\n- Primary focus on the dashboard frontend\n- Backend API setup but database connection pending","size_bytes":1990},"backend/src/server.js":{"content":"// src/server.js\nconst express = require(\"express\");\nconst connectDB = require(\"./config/db\");\nconst errorHandler = require(\"./middleware/errorHandler\");\nconst { PORT } = require(\"./config/env\");\n\nconst app = express();\n\n// Connect to MongoDB\nconnectDB();\n\n// Middleware\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\n\n// Routes\napp.use(\"/api/auth\", require(\"./routes/authRoutes\"));\napp.use(\"/api/reports\", require(\"./routes/reportRoutes\"));\n\n// Error Handler\napp.use(errorHandler);\n\n// Start Server\napp.listen(PORT, \"localhost\", () => console.log(`🚀 Server running on localhost:${PORT}`));\n","size_bytes":621},"backend/src/tempCodeRunnerFile.js":{"content":"// src/server.js\nconst express = require(\"express\");\nconst connectDB = require(\"./config/db\");\nconst errorHandler = require(\"./middleware/errorHandler\");\nconst { PORT } = require(\"./config/env\");\n\nconst app = express();\n\n// Connect to MongoDB\nconnectDB();\n\n// Middleware\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\n\n// Routes\napp.use(\"/api/auth\", require(\"./routes/authRoutes.js\"));\napp.use(\"/api/reports\", require(\"./routes/reportRoutes.js\"));\n\n// Error Handler\napp.use(errorHandler);\n\n// Start Server\napp.listen(PORT, () => console.log(`🚀 Server running on port ${PORT}`));\n","size_bytes":609},"frontend/dashboard/README.md":{"content":"# Anima Project\n\nWelcome! This project has been automatically generated by [Anima](https://animaapp.com/).\n\n## Getting started\n\n> **Prerequisites:**\n> The following steps require [NodeJS](https://nodejs.org/en/) to be installed on your system, so please\n> install it beforehand if you haven't already.\n\nTo get started with your project, you'll first need to install the dependencies with:\n\n```\nnpm install\n```\n\nThen, you'll be able to run a development version of the project with:\n\n```\nnpm run dev\n```\n\nAfter a few seconds, your project should be accessible at the address\n[http://localhost:5173/](http://localhost:5173/)\n\n\nIf you are satisfied with the result, you can finally build the project for release with:\n\n```\nnpm run build\n```\n","size_bytes":738},"frontend/dashboard/eslint.config.js":{"content":"import js from '@eslint/js'\nimport globals from 'globals'\nimport reactHooks from 'eslint-plugin-react-hooks'\nimport reactRefresh from 'eslint-plugin-react-refresh'\nimport tseslint from 'typescript-eslint'\nimport { defineConfig, globalIgnores } from 'eslint/config'\n\nexport default defineConfig([\n  globalIgnores(['dist']),\n  {\n    files: ['**/*.{ts,tsx}'],\n    extends: [\n      js.configs.recommended,\n      tseslint.configs.recommended,\n      reactHooks.configs['recommended-latest'],\n      reactRefresh.configs.vite,\n    ],\n    languageOptions: {\n      ecmaVersion: 2020,\n      globals: globals.browser,\n    },\n  },\n])\n","size_bytes":621},"frontend/dashboard/tailwind.config.js":{"content":"module.exports = {\n  content: [\n    \"./src/**/*.{html,js,ts,jsx,tsx}\",\n    \"app/**/*.{ts,tsx}\",\n    \"components/**/*.{ts,tsx}\",\n  ],\n  theme: {\n    extend: {\n      colors: {\n        \"m3syslighton-surface\": \"var(--m3syslighton-surface)\",\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n      },\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      fontFamily: {\n        sans: [\n          \"ui-sans-serif\",\n          \"system-ui\",\n          \"sans-serif\",\n          '\"Apple Color Emoji\"',\n          '\"Segoe UI Emoji\"',\n          '\"Segoe UI Symbol\"',\n          '\"Noto Color Emoji\"',\n        ],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n    container: { center: true, padding: \"2rem\", screens: { \"2xl\": \"1400px\" } },\n  },\n  plugins: [],\n  darkMode: [\"class\"],\n};\n","size_bytes":2317},"frontend/dashboard/tailwind.css":{"content":"@tailwind components;\n@tailwind utilities;\n\n@layer components {\n  .all-\\[unset\\] {\n    all: unset;\n  }\n}\n\n:root {\n  --m3syslighton-surface: rgba(29, 27, 32, 1);\n}\n\n:root {\n  --animate-spin: spin 1s linear infinite;\n}\n\n.animate-fade-in {\n  animation: fade-in 1s var(--animation-delay, 0s) ease forwards;\n}\n\n.animate-fade-up {\n  animation: fade-up 1s var(--animation-delay, 0s) ease forwards;\n}\n\n.animate-marquee {\n  animation: marquee var(--duration) infinite linear;\n}\n\n.animate-marquee-vertical {\n  animation: marquee-vertical var(--duration) linear infinite;\n}\n\n.animate-shimmer {\n  animation: shimmer 8s infinite;\n}\n\n.animate-spin {\n  animation: var(--animate-spin);\n}\n\n@keyframes spin {\n  to {\n    transform: rotate(1turn);\n  }\n}\n\n@keyframes image-glow {\n  0% {\n    opacity: 0;\n    animation-timing-function: cubic-bezier(0.74, 0.25, 0.76, 1);\n  }\n\n  10% {\n    opacity: 0.7;\n    animation-timing-function: cubic-bezier(0.12, 0.01, 0.08, 0.99);\n  }\n\n  to {\n    opacity: 0.4;\n  }\n}\n\n@keyframes fade-in {\n  0% {\n    opacity: 0;\n    transform: translateY(-10px);\n  }\n\n  to {\n    opacity: 1;\n    transform: none;\n  }\n}\n\n@keyframes fade-up {\n  0% {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n\n  to {\n    opacity: 1;\n    transform: none;\n  }\n}\n\n@keyframes shimmer {\n  0%,\n  90%,\n  to {\n    background-position: calc(-100% - var(--shimmer-width)) 0;\n  }\n\n  30%,\n  60% {\n    background-position: calc(100% + var(--shimmer-width)) 0;\n  }\n}\n\n@keyframes marquee {\n  0% {\n    transform: translate(0);\n  }\n\n  to {\n    transform: translateX(calc(-100% - var(--gap)));\n  }\n}\n\n@keyframes marquee-vertical {\n  0% {\n    transform: translateY(0);\n  }\n\n  to {\n    transform: translateY(calc(-100% - var(--gap)));\n  }\n}\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  :root {\n    --background: 0 0% 100%;\n    --foreground: 222.2 47.4% 11.2%;\n\n    --muted: 210 40% 96.1%;\n    --muted-foreground: 215.4 16.3% 46.9%;\n\n    --popover: 0 0% 100%;\n    --popover-foreground: 222.2 47.4% 11.2%;\n\n    --border: 214.3 31.8% 91.4%;\n    --input: 214.3 31.8% 91.4%;\n\n    --card: transparent;\n    --card-foreground: 222.2 47.4% 11.2%;\n\n    --primary: 222.2 47.4% 11.2%;\n    --primary-foreground: 210 40% 98%;\n\n    --secondary: 210 40% 96.1%;\n    --secondary-foreground: 222.2 47.4% 11.2%;\n\n    --accent: 210 40% 96.1%;\n    --accent-foreground: 222.2 47.4% 11.2%;\n\n    --destructive: 0 100% 50%;\n    --destructive-foreground: 210 40% 98%;\n\n    --ring: 215 20.2% 65.1%;\n\n    --radius: 0.5rem;\n  }\n\n  .dark {\n    --background: 224 71% 4%;\n    --foreground: 213 31% 91%;\n\n    --muted: 223 47% 11%;\n    --muted-foreground: 215.4 16.3% 56.9%;\n\n    --accent: 216 34% 17%;\n    --accent-foreground: 210 40% 98%;\n\n    --popover: 224 71% 4%;\n    --popover-foreground: 215 20.2% 65.1%;\n\n    --border: 216 34% 17%;\n    --input: 216 34% 17%;\n\n    --card: transparent;\n    --card-foreground: 213 31% 91%;\n\n    --primary: 210 40% 98%;\n    --primary-foreground: 222.2 47.4% 1.2%;\n\n    --secondary: 222.2 47.4% 11.2%;\n    --secondary-foreground: 210 40% 98%;\n\n    --destructive: 0 63% 31%;\n    --destructive-foreground: 210 40% 98%;\n\n    --ring: 216 34% 17%;\n\n    --radius: 0.5rem;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply bg-background text-foreground;\n    font-feature-settings: \"rlig\" 1, \"calt\" 1;\n  }\n}\n","size_bytes":3332},"frontend/dashboard/vite.config.ts":{"content":"import react from \"@vitejs/plugin-react\";\nimport tailwind from \"tailwindcss\";\nimport { defineConfig } from \"vite\";\n\n// https://vite.dev/config/\nexport default defineConfig({\n  plugins: [react()],\n  base: \"./\",\n  server: {\n    host: \"0.0.0.0\",\n    port: 5000,\n    strictPort: true,\n  },\n  css: {\n    postcss: {\n      plugins: [tailwind()],\n    },\n  },\n});\n","size_bytes":355},"backend/src/config/cloudinary.js":{"content":"const cloudinary = require(\"cloudinary\").v2;\nconst { CLOUDINARY } = require(\"./env\");\ncloudinary.config({\n  cloud_name: CLOUDINARY.CLOUD_NAME,\n  api_key: CLOUDINARY.API_KEY,\n  api_secret: CLOUDINARY.API_SECRET,\n});\nmodule.exports = cloudinary;","size_bytes":243},"backend/src/config/db.js":{"content":"// src/config/db.js\nconst mongoose = require(\"mongoose\");\n\nconst connectDB = async () => {\n  try {\n    await mongoose.connect(process.env.MONGO_URI, {\n      useNewUrlParser: true,\n      useUnifiedTopology: true,\n    });\n    console.log(\"✅ MongoDB connected successfully\");\n  } catch (error) {\n    console.error(\"❌ MongoDB connection failed:\", error.message);\n    process.exit(1); // stop the app if DB is not connected\n  }\n};\n\nmodule.exports = connectDB;\n","size_bytes":459},"backend/src/config/env.js":{"content":"require(\"dotenv\").config();\n\nmodule.exports = {\n  PORT: process.env.PORT || 3000,\n  MONGO_URI: process.env.MONGO_URI,\n  JWT_SECRET: process.env.JWT_SECRET || \"changeme\",\n  CLOUDINARY: {\n    CLOUD_NAME: process.env.CLOUDINARY_CLOUD_NAME,\n    API_KEY: process.env.CLOUDINARY_API_KEY,\n    API_SECRET: process.env.CLOUDINARY_API_SECRET,\n  }\n};\n","size_bytes":340},"backend/src/config/tempCodeRunnerFile.js":{"content":"require(\"dotenv\").config();\n\nmodule.exports = {\n  PORT: process.env.PORT || 5000,\n  MONGO_URI: process.env.MONGO_URI,\n  JWT_SECRET: process.env.JWT_SECRET || \"changeme\",\n  CLOUDINARY: {\n    CLOUD_NAME: process.env.CLOUDINARY_CLOUD_NAME,\n    API_KEY: process.env.CLOUDINARY_API_KEY,\n    API_SECRET: process.env.CLOUDINARY_API_SECRET,\n  }\n};\n","size_bytes":340},"backend/src/controllers/adminController.js":{"content":"// src/controllers/adminController.js\nexports.getAllUsers = async (req, res) => {\n  try {\n    res.status(200).json({\n      message: \"All users fetched successfully\",\n      users: [\n        { id: 1, name: \"User One\" },\n        { id: 2, name: \"User Two\" }\n      ]\n    });\n  } catch (error) {\n    res.status(500).json({ message: \"Error fetching users\", error });\n  }\n};\n\nexports.deleteUser = async (req, res) => {\n  try {\n    const userId = req.params.id;\n    res.status(200).json({ message: `User with id ${userId} deleted successfully` });\n  } catch (error) {\n    res.status(500).json({ message: \"Error deleting user\", error });\n  }\n};\n","size_bytes":635},"backend/src/controllers/authController.js":{"content":"// src/controllers/authController.js\nexports.registerUser = async (req, res) => {\n  try {\n    res.status(201).json({ message: \"User registered successfully\" });\n  } catch (error) {\n    res.status(500).json({ message: \"Error registering user\", error });\n  }\n};\n\nexports.loginUser = async (req, res) => {\n  try {\n    res.status(200).json({ message: \"User logged in successfully\" });\n  } catch (error) {\n    res.status(500).json({ message: \"Error logging in\", error });\n  }\n};\n","size_bytes":474},"backend/src/controllers/reportController.js":{"content":"const Report = require(\"../models/Report\");\nconst cloudinary = require(\"../config/cloudinary\");\n\nexports.createReport = async (req, res) => {\n  try {\n    let photoUrl = null;\n    if (req.file) {\n      const result = await cloudinary.uploader.upload_stream({ resource_type: \"image\" });\n      photoUrl = result.secure_url;\n    }\n\n    const report = await Report.create({\n      title: req.body.title,\n      description: req.body.description,\n      category: req.body.category,\n      photoUrl,\n      location: { type: \"Point\", coordinates: req.body.coordinates },\n      createdBy: req.user._id,\n    });\n\n    res.status(201).json(report);\n  } catch (err) {\n    res.status(500).json({ message: err.message });\n  }\n};\n\nexports.getReports = async (req, res) => {\n  const reports = await Report.find().populate(\"createdBy\", \"name email\");\n  res.json(reports);\n};\n","size_bytes":854},"backend/src/controllers/tempCodeRunnerFile.js":{"content":"const User = require(\"../models/User\");\nconst jwt = require(\"jsonwebtoken\");\n\nconst generateToken = (id) => jwt.sign({ id }, process.env.JWT_SECRET, { expiresIn: \"30d\" });\n\nexports.register = async (req, res) => {\n  const { name, email, password } = req.body;\n  const userExists = await User.findOne({ email });\n  if (userExists) return res.status(400).json({ message: \"User already exists\" });\n\n  const user = await User.create({ name, email, password });\n  res.status(201).json({ \n    _id: user._id, name: user.name, email: user.email, token: generateToken(user._id) \n  });\n};\n\nexports.login = async (req, res) => {\n  const { email, password } = req.body;\n  const user = await User.findOne({ email });\n  if (user && (await user.matchPassword(password))) {\n    return res.json({ \n      _id: user._id, name: user.name, email: user.email, token: generateToken(user._id) \n    });\n  }\n  res.status(401).json({ message: \"Invalid credentials\" });\n};\n","size_bytes":945},"backend/src/controllers/userController.js":{"content":"// src/controllers/userController.js\nconst bcrypt = require(\"bcryptjs\");\nconst jwt = require(\"jsonwebtoken\");\nconst User = require(\"../models/User\");\n\n// ✅ Generate JWT Token\nconst generateToken = (id) => {\n  return jwt.sign({ id }, process.env.JWT_SECRET, {\n    expiresIn: \"30d\", // token valid for 30 days\n  });\n};\n\n// ✅ Register User\nexports.registerUser = async (req, res) => {\n  try {\n    const { name, email, password, role } = req.body;\n\n    if (!name || !email || !password) {\n      return res.status(400).json({ message: \"Please fill all fields\" });\n    }\n\n    // Check if user already exists\n    const userExists = await User.findOne({ email });\n    if (userExists) {\n      return res.status(400).json({ message: \"User already exists\" });\n    }\n\n    // Hash password\n    const salt = await bcrypt.genSalt(10);\n    const hashedPassword = await bcrypt.hash(password, salt);\n\n    // Create new user\n    const user = await User.create({\n      name,\n      email,\n      password: hashedPassword,\n      role: role || \"citizen\", // default role = citizen\n    });\n\n    res.status(201).json({\n      _id: user.id,\n      name: user.name,\n      email: user.email,\n      role: user.role,\n      token: generateToken(user.id),\n    });\n  } catch (error) {\n    console.error(\"❌ Register Error:\", error.message);\n    res.status(500).json({ message: \"Server error\" });\n  }\n};\n\n// ✅ Login User\nexports.loginUser = async (req, res) => {\n  try {\n    const { email, password } = req.body;\n\n    // Check if user exists\n    const user = await User.findOne({ email });\n    if (!user) {\n      return res.status(400).json({ message: \"Invalid email or password\" });\n    }\n\n    // Check password\n    const isMatch = await bcrypt.compare(password, user.password);\n    if (!isMatch) {\n      return res.status(400).json({ message: \"Invalid email or password\" });\n    }\n\n    res.json({\n      _id: user.id,\n      name: user.name,\n      email: user.email,\n      role: user.role,\n      token: generateToken(user.id),\n    });\n  } catch (error) {\n    console.error(\"❌ Login Error:\", error.message);\n    res.status(500).json({ message: \"Server error\" });\n  }\n};\n\n// ✅ Get Logged-in User Profile\nexports.getUserProfile = async (req, res) => {\n  try {\n    const user = await User.findById(req.user.id).select(\"-password\");\n    if (!user) {\n      return res.status(404).json({ message: \"User not found\" });\n    }\n    res.json(user);\n  } catch (error) {\n    console.error(\"❌ Profile Error:\", error.message);\n    res.status(500).json({ message: \"Server error\" });\n  }\n};\n\n// ✅ Update User Profile\nexports.updateUserProfile = async (req, res) => {\n  try {\n    const user = await User.findById(req.user.id);\n\n    if (!user) {\n      return res.status(404).json({ message: \"User not found\" });\n    }\n\n    user.name = req.body.name || user.name;\n    user.email = req.body.email || user.email;\n\n    if (req.body.password) {\n      const salt = await bcrypt.genSalt(10);\n      user.password = await bcrypt.hash(req.body.password, salt);\n    }\n\n    const updatedUser = await user.save();\n\n    res.json({\n      _id: updatedUser.id,\n      name: updatedUser.name,\n      email: updatedUser.email,\n      role: updatedUser.role,\n      token: generateToken(updatedUser.id),\n    });\n  } catch (error) {\n    console.error(\"❌ Update Profile Error:\", error.message);\n    res.status(500).json({ message: \"Server error\" });\n  }\n};\n","size_bytes":3391},"backend/src/middleware/authMiddleware.js":{"content":"const User = require(\"../models/User\");\nconst jwt = require(\"jsonwebtoken\");\n\nconst generateToken = (id) => jwt.sign({ id }, process.env.JWT_SECRET, { expiresIn: \"30d\" });\n\nexports.register = async (req, res) => {\n  const { name, email, password } = req.body;\n  const userExists = await User.findOne({ email });\n  if (userExists) return res.status(400).json({ message: \"User already exists\" });\n\n  const user = await User.create({ name, email, password });\n  res.status(201).json({ \n    _id: user._id, name: user.name, email: user.email, token: generateToken(user._id) \n  });\n};\n\nexports.login = async (req, res) => {\n  const { email, password } = req.body;\n  const user = await User.findOne({ email });\n  if (user && (await user.matchPassword(password))) {\n    return res.json({ \n      _id: user._id, name: user.name, email: user.email, token: generateToken(user._id) \n    });\n  }\n  res.status(401).json({ message: \"Invalid credentials\" });\n};\n","size_bytes":945},"backend/src/middleware/errorHandler.js":{"content":"const errorHandler = (err, req, res, next) => {\n  console.error(err.stack);\n  res.status(500).json({ message: err.message || \"Server Error\" });\n};\n\nmodule.exports = errorHandler;\n","size_bytes":179},"backend/src/middleware/tempCodeRunnerFile.js":{"content":"const User = require(\"../models/User\");\nconst jwt = require(\"jsonwebtoken\");\n\nconst generateToken = (id) => jwt.sign({ id }, process.env.JWT_SECRET, { expiresIn: \"30d\" });\n\nexports.register = async (req, res) => {\n  const { name, email, password } = req.body;\n  const userExists = await User.findOne({ email });\n  if (userExists) return res.status(400).json({ message: \"User already exists\" });\n\n  const user = await User.create({ name, email, password });\n  res.status(201).json({ \n    _id: user._id, name: user.name, email: user.email, token: generateToken(user._id) \n  });\n};\n\nexports.login = async (req, res) => {\n  const { email, password } = req.body;\n  const user = await User.findOne({ email });\n  if (user && (await user.matchPassword(password))) {\n    return res.json({ \n      _id: user._id, name: user.name, email: user.email, token: generateToken(user._id) \n    });\n  }\n  res.status(401).json({ message: \"Invalid credentials\" });\n};","size_bytes":944},"backend/src/middleware/upload.js":{"content":"const multer = require(\"multer\");\n\nconst storage = multer.memoryStorage();\nconst upload = multer({ storage, limits: { fileSize: 5 * 1024 * 1024 } }); // 5MB\n\nmodule.exports = upload;","size_bytes":182},"backend/src/models/Department.js":{"content":"const mongoose = require(\"mongoose\");\n\nconst deptSchema = new mongoose.Schema({\n  name: { type: String, required: true },\n  description: String\n});\n\nmodule.exports = mongoose.model(\"Department\", deptSchema);\n","size_bytes":208},"backend/src/models/Report.js":{"content":"const mongoose = require(\"mongoose\");\n\nconst reportSchema = new mongoose.Schema({\n  title: String,\n  description: String,\n  category: { type: String, enum: [\"pothole\", \"streetlight\", \"garbage\", \"other\"], required: true },\n  photoUrl: String,\n  location: {\n    type: { type: String, enum: [\"Point\"], default: \"Point\" },\n    coordinates: { type: [Number], required: true }, // [lng, lat]\n  },\n  status: { type: String, enum: [\"submitted\", \"acknowledged\", \"in-progress\", \"resolved\"], default: \"submitted\" },\n  createdBy: { type: mongoose.Schema.Types.ObjectId, ref: \"User\" },\n  assignedDept: { type: mongoose.Schema.Types.ObjectId, ref: \"Department\" }\n}, { timestamps: true });\n\nreportSchema.index({ location: \"2dsphere\" });\n\nmodule.exports = mongoose.model(\"Report\", reportSchema);\n","size_bytes":780},"backend/src/models/User.js":{"content":"const mongoose = require(\"mongoose\");\nconst bcrypt = require(\"bcryptjs\");\n\nconst userSchema = new mongoose.Schema({\n  name: { type: String, required: true },\n  email: { type: String, required: true, unique: true },\n  password: { type: String, required: true },\n  role: { type: String, enum: [\"citizen\", \"admin\", \"staff\"], default: \"citizen\" },\n}, { timestamps: true });\n\nuserSchema.pre(\"save\", async function(next) {\n  if (!this.isModified(\"password\")) return next();\n  this.password = await bcrypt.hash(this.password, 10);\n  next();\n});\n\nuserSchema.methods.matchPassword = async function(enteredPassword) {\n  return await bcrypt.compare(enteredPassword, this.password);\n};\n\nmodule.exports = mongoose.model(\"User\", userSchema);\n","size_bytes":728},"backend/src/models/tempCodeRunnerFile.js":{"content":"const mongoose = require(\"mongoose\");\n\nconst deptSchema = new mongoose.Schema({\n  name: { type: String, required: true },\n  description: String\n});\n\nmodule.exports = mongoose.model(\"Department\", deptSchema);\n","size_bytes":208},"backend/src/routes/adminRoutes.js":{"content":"// src/routes/adminRoutes.js\nconst express = require(\"express\");\nconst { getAllUsers, deleteUser } = require(\"../controllers/adminController\");\n\nconst router = express.Router();\n\n// Get all users (Admin only)\nrouter.get(\"/users\", getAllUsers);\n\n// Delete a user (Admin only)\nrouter.delete(\"/users/:id\", deleteUser);\n\nmodule.exports = router;\n","size_bytes":342},"backend/src/routes/authRoutes.js":{"content":"// src/routes/authRoutes.js\nconst express = require(\"express\");\nconst { registerUser, loginUser } = require(\"../controllers/authController\");\n\nconst router = express.Router();\n\nrouter.post(\"/register\", registerUser);\nrouter.post(\"/login\", loginUser);\n\nmodule.exports = router;\n\n","size_bytes":278},"backend/src/routes/reportRoutes.js":{"content":"// src/routes/reportRoutes.js\nconst express = require(\"express\");\nconst { createReport, getReports } = require(\"../controllers/reportController\");\n\nconst router = express.Router();\n\nrouter.post(\"/\", createReport);\nrouter.get(\"/\", getReports);\n\nmodule.exports = router;\n","size_bytes":269},"backend/src/routes/userRoutes.js":{"content":"// src/routes/userRoutes.js\nconst express = require(\"express\");\nconst { getUserProfile, updateUserProfile } = require(\"../controllers/userController\");\n\nconst router = express.Router();\n\n// Get user profile\nrouter.get(\"/profile\", getUserProfile);\n\n// Update user profile\nrouter.put(\"/profile\", updateUserProfile);\n\nmodule.exports = router;\n","size_bytes":340},"backend/src/servies/mapService.js":{"content":"// src/services/mapService.js\nconst axios = require(\"axios\");\n\n// Example: Google Maps Geocoding API (convert address <-> coordinates)\n// You need to put your Google Maps API key in .env as GOOGLE_MAPS_API_KEY\n\nconst GOOGLE_MAPS_API = \"https://maps.googleapis.com/maps/api/geocode/json\";\n\nexports.getCoordinatesFromAddress = async (address) => {\n  try {\n    const response = await axios.get(GOOGLE_MAPS_API, {\n      params: {\n        address,\n        key: process.env.GOOGLE_MAPS_API_KEY,\n      },\n    });\n\n    if (response.data.results.length > 0) {\n      return response.data.results[0].geometry.location; // { lat, lng }\n    } else {\n      return null;\n    }\n  } catch (error) {\n    console.error(\"Error fetching coordinates:\", error.message);\n    throw new Error(\"Map service failed to get coordinates\");\n  }\n};\n\nexports.getAddressFromCoordinates = async (lat, lng) => {\n  try {\n    const response = await axios.get(GOOGLE_MAPS_API, {\n      params: {\n        latlng: `${lat},${lng}`,\n        key: process.env.GOOGLE_MAPS_API_KEY,\n      },\n    });\n\n    if (response.data.results.length > 0) {\n      return response.data.results[0].formatted_address;\n    } else {\n      return null;\n    }\n  } catch (error) {\n    console.error(\"Error fetching address:\", error.message);\n    throw new Error(\"Map service failed to get address\");\n  }\n};\n","size_bytes":1337},"backend/src/servies/notificationService.js":{"content":"// src/services/notificationService.js\nconst nodemailer = require(\"nodemailer\");\n\n// ✅ Email Notification Service\nexports.sendEmailNotification = async (to, subject, message) => {\n  try {\n    // transporter setup (use Gmail or any SMTP service)\n    const transporter = nodemailer.createTransport({\n      service: \"gmail\", // you can use: \"hotmail\", \"yahoo\", or custom SMTP\n      auth: {\n        user: process.env.EMAIL_USER, // your email\n        pass: process.env.EMAIL_PASS, // your email password or app password\n      },\n    });\n\n    const mailOptions = {\n      from: process.env.EMAIL_USER,\n      to,\n      subject,\n      text: message,\n    };\n\n    const info = await transporter.sendMail(mailOptions);\n    console.log(\"✅ Email sent:\", info.response);\n    return true;\n  } catch (error) {\n    console.error(\"❌ Error sending email:\", error.message);\n    throw new Error(\"Failed to send email notification\");\n  }\n};\n\n// ✅ Push Notification Service (Dummy for now, can extend to Firebase or OneSignal)\nexports.sendPushNotification = async (userId, message) => {\n  try {\n    // Here you can integrate Firebase Cloud Messaging (FCM) or OneSignal\n    console.log(`📲 Push notification to ${userId}: ${message}`);\n    return true;\n  } catch (error) {\n    console.error(\"❌ Error sending push notification:\", error.message);\n    throw new Error(\"Failed to send push notification\");\n  }\n};\n","size_bytes":1397},"backend/src/utiils/logger.js":{"content":"// src/utils/logger.js\nconst fs = require(\"fs\");\nconst path = require(\"path\");\n\n// Log file path\nconst logFile = path.join(__dirname, \"../../logs/app.log\");\n\n// Utility to write log messages\nconst writeLog = (level, message) => {\n  const logMessage = `[${new Date().toISOString()}] [${level.toUpperCase()}] ${message}\\n`;\n  console.log(logMessage); // print on console\n  fs.appendFileSync(logFile, logMessage, \"utf8\"); // save to file\n};\n\n// Logger functions\nexports.info = (message) => {\n  writeLog(\"info\", message);\n};\n\nexports.warn = (message) => {\n  writeLog(\"warn\", message);\n};\n\nexports.error = (message) => {\n  writeLog(\"error\", message);\n};\n","size_bytes":649},"backend/src/utiils/responseHelper.js":{"content":"// src/helpers/responseHelper.js\n\nconst successResponse = (res, message, data = {}, statusCode = 200) => {\n  return res.status(statusCode).json({\n    success: true,\n    message,\n    data,\n  });\n};\n\nconst errorResponse = (res, message, statusCode = 500, error = null) => {\n  return res.status(statusCode).json({\n    success: false,\n    message,\n    error: error ? error.toString() : undefined,\n  });\n};\n\nmodule.exports = {\n  successResponse,\n  errorResponse,\n};\n","size_bytes":461},"frontend/app/app/+not-found.tsx":{"content":"import { Link, Stack } from 'expo-router';\nimport { StyleSheet, Text, View } from 'react-native';\n\nexport default function NotFoundScreen() {\n  return (\n    <>\n      <Stack.Screen options={{ title: 'Oops!' }} />\n      <View style={styles.container}>\n        <Text style={styles.text}>This screen doesn't exist.</Text>\n        <Link href=\"/\" style={styles.link}>\n          <Text>Go to home screen!</Text>\n        </Link>\n      </View>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 20,\n  },\n  text: {\n    fontSize: 20,\n    fontWeight: 600,\n  },\n  link: {\n    marginTop: 15,\n    paddingVertical: 15,\n  },\n});\n","size_bytes":708},"frontend/app/app/_layout.tsx":{"content":"import { useEffect } from 'react';\nimport { Stack } from 'expo-router';\nimport { StatusBar } from 'expo-status-bar';\nimport { useFrameworkReady } from '@/hooks/useFrameworkReady';\n\nexport default function RootLayout() {\n  useFrameworkReady();\n\n  return (\n    <>\n      <Stack screenOptions={{ headerShown: false }}>\n        <Stack.Screen name=\"+not-found\" />\n      </Stack>\n      <StatusBar style=\"auto\" />\n    </>\n  );\n}\n","size_bytes":421},"frontend/app/components/ReportIssueModal.tsx":{"content":"import React, { useState, useRef } from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  Modal,\n  TouchableOpacity,\n  TextInput,\n  ScrollView,\n  Alert,\n  Image,\n} from 'react-native';\nimport { CameraView, CameraType, useCameraPermissions } from 'expo-camera';\nimport * as ImagePicker from 'expo-image-picker';\nimport {\n  X,\n  Camera,\n  Image as ImageIcon,\n  MapPin,\n  Send,\n  RotateCcw,\n} from 'lucide-react-native';\n\ninterface ReportIssueModalProps {\n  visible: boolean;\n  onClose: () => void;\n  selectedCategory?: {\n    id: number;\n    title: string;\n    icon: any;\n    color: string;\n  } | null;\n}\n\nexport default function ReportIssueModal({\n  visible,\n  onClose,\n  selectedCategory,\n}: ReportIssueModalProps) {\n  const [showCamera, setShowCamera] = useState(false);\n  const [facing, setFacing] = useState<CameraType>('back');\n  const [permission, requestPermission] = useCameraPermissions();\n  const [capturedImage, setCapturedImage] = useState<string | null>(null);\n  const [description, setDescription] = useState('');\n  const [location, setLocation] = useState('Current Location');\n  const cameraRef = useRef<CameraView>(null);\n\n  const takePicture = async () => {\n    if (cameraRef.current) {\n      try {\n        const photo = await cameraRef.current.takePictureAsync({\n          quality: 0.8,\n          base64: false,\n        });\n        if (photo) {\n          setCapturedImage(photo.uri);\n          setShowCamera(false);\n        }\n      } catch (error) {\n        Alert.alert('Error', 'Failed to take picture');\n      }\n    }\n  };\n\n  const pickImage = async () => {\n    const result = await ImagePicker.launchImageLibraryAsync({\n      mediaTypes: ImagePicker.MediaTypeOptions.Images,\n      allowsEditing: true,\n      aspect: [4, 3],\n      quality: 0.8,\n    });\n\n    if (!result.canceled && result.assets[0]) {\n      setCapturedImage(result.assets[0].uri);\n    }\n  };\n\n  const openCamera = async () => {\n    if (!permission) {\n      const permissionResult = await requestPermission();\n      if (!permissionResult.granted) {\n        Alert.alert(\n          'Permission Required',\n          'Camera permission is required to take photos'\n        );\n        return;\n      }\n    }\n\n    if (!permission?.granted) {\n      const permissionResult = await requestPermission();\n      if (!permissionResult.granted) {\n        Alert.alert(\n          'Permission Required',\n          'Camera permission is required to take photos'\n        );\n        return;\n      }\n    }\n\n    setShowCamera(true);\n  };\n\n  const submitReport = () => {\n    if (!description.trim()) {\n      Alert.alert('Error', 'Please provide a description of the issue');\n      return;\n    }\n\n    // Simulate report submission\n    Alert.alert(\n      'Report Submitted',\n      'Your report has been submitted successfully. You will receive updates on its progress.',\n      [\n        {\n          text: 'OK',\n          onPress: () => {\n            setDescription('');\n            setCapturedImage(null);\n            onClose();\n          },\n        },\n      ]\n    );\n  };\n\n  const toggleCameraFacing = () => {\n    setFacing((current) => (current === 'back' ? 'front' : 'back'));\n  };\n\n  if (showCamera) {\n    return (\n      <Modal visible={visible} animationType=\"slide\">\n        <View style={styles.cameraContainer}>\n          <CameraView\n            ref={cameraRef}\n            style={styles.camera}\n            facing={facing}\n          >\n            <View style={styles.cameraControls}>\n              <TouchableOpacity\n                style={styles.cameraButton}\n                onPress={() => setShowCamera(false)}\n              >\n                <X color=\"#FFFFFF\" size={24} />\n              </TouchableOpacity>\n              \n              <TouchableOpacity\n                style={styles.cameraButton}\n                onPress={toggleCameraFacing}\n              >\n                <RotateCcw color=\"#FFFFFF\" size={24} />\n              </TouchableOpacity>\n            </View>\n            \n            <View style={styles.cameraBottomControls}>\n              <TouchableOpacity\n                style={styles.captureButton}\n                onPress={takePicture}\n              >\n                <View style={styles.captureButtonInner} />\n              </TouchableOpacity>\n            </View>\n          </CameraView>\n        </View>\n      </Modal>\n    );\n  }\n\n  return (\n    <Modal visible={visible} animationType=\"slide\" presentationStyle=\"pageSheet\">\n      <View style={styles.container}>\n        <View style={styles.header}>\n          <TouchableOpacity onPress={onClose} style={styles.closeButton}>\n            <X color=\"#6B7280\" size={24} />\n          </TouchableOpacity>\n          <Text style={styles.headerTitle}>Report Issue</Text>\n          <View style={styles.placeholder} />\n        </View>\n\n        <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>\n          {selectedCategory && (\n            <View style={styles.categorySection}>\n              <Text style={styles.sectionTitle}>Category</Text>\n              <View style={styles.selectedCategory}>\n                <View\n                  style={[\n                    styles.categoryIcon,\n                    { backgroundColor: `${selectedCategory.color}20` },\n                  ]}\n                >\n                  <selectedCategory.icon\n                    color={selectedCategory.color}\n                    size={20}\n                  />\n                </View>\n                <Text style={styles.categoryTitle}>\n                  {selectedCategory.title}\n                </Text>\n              </View>\n            </View>\n          )}\n\n          <View style={styles.section}>\n            <Text style={styles.sectionTitle}>Description</Text>\n            <TextInput\n              style={styles.textInput}\n              placeholder=\"Describe the issue in detail...\"\n              multiline\n              numberOfLines={4}\n              value={description}\n              onChangeText={setDescription}\n              textAlignVertical=\"top\"\n            />\n          </View>\n\n          <View style={styles.section}>\n            <Text style={styles.sectionTitle}>Location</Text>\n            <TouchableOpacity style={styles.locationButton}>\n              <MapPin color=\"#4285F4\" size={16} />\n              <Text style={styles.locationText}>{location}</Text>\n            </TouchableOpacity>\n          </View>\n\n          <View style={styles.section}>\n            <Text style={styles.sectionTitle}>Photo Evidence</Text>\n            <View style={styles.photoSection}>\n              {capturedImage ? (\n                <View style={styles.imageContainer}>\n                  <Image source={{ uri: capturedImage }} style={styles.image} />\n                  <TouchableOpacity\n                    style={styles.removeImageButton}\n                    onPress={() => setCapturedImage(null)}\n                  >\n                    <X color=\"#FFFFFF\" size={16} />\n                  </TouchableOpacity>\n                </View>\n              ) : (\n                <View style={styles.photoButtons}>\n                  <TouchableOpacity\n                    style={styles.photoButton}\n                    onPress={openCamera}\n                  >\n                    <Camera color=\"#4285F4\" size={24} />\n                    <Text style={styles.photoButtonText}>Take Photo</Text>\n                  </TouchableOpacity>\n                  <TouchableOpacity\n                    style={styles.photoButton}\n                    onPress={pickImage}\n                  >\n                    <ImageIcon color=\"#4285F4\" size={24} />\n                    <Text style={styles.photoButtonText}>Choose Photo</Text>\n                  </TouchableOpacity>\n                </View>\n              )}\n            </View>\n          </View>\n        </ScrollView>\n\n        <View style={styles.footer}>\n          <TouchableOpacity style={styles.submitButton} onPress={submitReport}>\n            <Send color=\"#FFFFFF\" size={20} />\n            <Text style={styles.submitButtonText}>Submit Report</Text>\n          </TouchableOpacity>\n        </View>\n      </View>\n    </Modal>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#F8FAFC',\n  },\n  header: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingHorizontal: 20,\n    paddingTop: 60,\n    paddingBottom: 20,\n    backgroundColor: '#FFFFFF',\n    borderBottomWidth: 1,\n    borderBottomColor: '#E5E7EB',\n  },\n  closeButton: {\n    padding: 4,\n  },\n  headerTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: '#1F2937',\n  },\n  placeholder: {\n    width: 32,\n  },\n  content: {\n    flex: 1,\n    paddingHorizontal: 20,\n  },\n  section: {\n    marginTop: 24,\n  },\n  categorySection: {\n    marginTop: 20,\n  },\n  sectionTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: '#1F2937',\n    marginBottom: 12,\n  },\n  selectedCategory: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: '#FFFFFF',\n    padding: 16,\n    borderRadius: 12,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.06,\n    shadowRadius: 8,\n    elevation: 2,\n  },\n  categoryIcon: {\n    width: 40,\n    height: 40,\n    borderRadius: 10,\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginRight: 12,\n  },\n  categoryTitle: {\n    fontSize: 16,\n    fontWeight: '500',\n    color: '#374151',\n  },\n  textInput: {\n    backgroundColor: '#FFFFFF',\n    borderRadius: 12,\n    padding: 16,\n    fontSize: 16,\n    color: '#374151',\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.06,\n    shadowRadius: 8,\n    elevation: 2,\n    minHeight: 100,\n  },\n  locationButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: '#FFFFFF',\n    padding: 16,\n    borderRadius: 12,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.06,\n    shadowRadius: 8,\n    elevation: 2,\n  },\n  locationText: {\n    fontSize: 16,\n    color: '#374151',\n    marginLeft: 8,\n  },\n  photoSection: {\n    backgroundColor: '#FFFFFF',\n    borderRadius: 12,\n    padding: 16,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.06,\n    shadowRadius: 8,\n    elevation: 2,\n  },\n  photoButtons: {\n    flexDirection: 'row',\n    gap: 12,\n  },\n  photoButton: {\n    flex: 1,\n    alignItems: 'center',\n    padding: 20,\n    borderRadius: 8,\n    borderWidth: 2,\n    borderColor: '#E5E7EB',\n    borderStyle: 'dashed',\n  },\n  photoButtonText: {\n    fontSize: 14,\n    color: '#4285F4',\n    fontWeight: '500',\n    marginTop: 8,\n  },\n  imageContainer: {\n    position: 'relative',\n  },\n  image: {\n    width: '100%',\n    height: 200,\n    borderRadius: 8,\n  },\n  removeImageButton: {\n    position: 'absolute',\n    top: 8,\n    right: 8,\n    backgroundColor: '#EF4444',\n    borderRadius: 12,\n    width: 24,\n    height: 24,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  footer: {\n    padding: 20,\n    backgroundColor: '#FFFFFF',\n    borderTopWidth: 1,\n    borderTopColor: '#E5E7EB',\n  },\n  submitButton: {\n    backgroundColor: '#4285F4',\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: 16,\n    borderRadius: 12,\n    shadowColor: '#4285F4',\n    shadowOffset: { width: 0, height: 4 },\n    shadowOpacity: 0.3,\n    shadowRadius: 8,\n    elevation: 6,\n  },\n  submitButtonText: {\n    color: '#FFFFFF',\n    fontSize: 16,\n    fontWeight: '600',\n    marginLeft: 8,\n  },\n  cameraContainer: {\n    flex: 1,\n  },\n  camera: {\n    flex: 1,\n  },\n  cameraControls: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    paddingHorizontal: 20,\n    paddingTop: 60,\n  },\n  cameraButton: {\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n    borderRadius: 20,\n    width: 40,\n    height: 40,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  cameraBottomControls: {\n    position: 'absolute',\n    bottom: 50,\n    left: 0,\n    right: 0,\n    alignItems: 'center',\n  },\n  captureButton: {\n    width: 70,\n    height: 70,\n    borderRadius: 35,\n    backgroundColor: 'rgba(255, 255, 255, 0.3)',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  captureButtonInner: {\n    width: 60,\n    height: 60,\n    borderRadius: 30,\n    backgroundColor: '#FFFFFF',\n  },\n});","size_bytes":12280},"frontend/app/hooks/useFrameworkReady.ts":{"content":"import { useEffect } from 'react';\n\ndeclare global {\n  interface Window {\n    frameworkReady?: () => void;\n  }\n}\n\nexport function useFrameworkReady() {\n  useEffect(() => {\n    window.frameworkReady?.();\n  });\n}\n","size_bytes":211},"frontend/dashboard/src/App.tsx":{"content":"import React from 'react';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport { Dashboard } from './screens/Dashboard/Dashboard';\nimport { WorkOrder } from './screens/WorkOrder/WorkOrder';\nimport { CreateWorkOrder } from './screens/WorkOrder/CreateWorkOrder';\nimport { Insights } from './screens/Insights/Insights';\nimport { Settings } from './screens/Settings/Settings';\nimport { Login } from './screens/Login/Login';\n\nexport const App = (): JSX.Element => {\n  return (\n    <Router>\n      <Routes>\n        <Route path=\"/\" element={<Dashboard />} />\n        <Route path=\"/login\" element={<Login />} />\n        <Route path=\"/dashboard\" element={<Dashboard />} />\n        <Route path=\"/work-order\" element={<WorkOrder />} />\n        <Route path=\"/work-order/create\" element={<CreateWorkOrder />} />\n        <Route path=\"/insights\" element={<Insights />} />\n        <Route path=\"/settings\" element={<Settings />} />\n      </Routes>\n    </Router>\n  );\n};","size_bytes":981},"frontend/dashboard/src/index.tsx":{"content":"import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport { App } from \"./App\";\n\ncreateRoot(document.getElementById(\"app\") as HTMLElement).render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n);\n","size_bytes":226},"frontend/dashboard/src/main.tsx":{"content":"import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport { App } from \"./App\";\n\ncreateRoot(document.getElementById(\"app\") as HTMLElement).render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n);\n","size_bytes":226},"frontend/dashboard/src/vite-env.d.ts":{"content":"/// <reference types=\"vite/client\" />\n","size_bytes":38},"frontend/app/app/(tabs)/_layout.tsx":{"content":"import { Tabs } from 'expo-router';\nimport { Chrome as Home, FileText, CircleAlert as AlertCircle, User } from 'lucide-react-native';\n\nexport default function TabLayout() {\n  return (\n    <Tabs\n      screenOptions={{\n        headerShown: false,\n        tabBarActiveTintColor: '#4285F4',\n        tabBarInactiveTintColor: '#9CA3AF',\n        tabBarStyle: {\n          backgroundColor: '#FFFFFF',\n          borderTopWidth: 1,\n          borderTopColor: '#E5E7EB',\n          paddingTop: 5,\n          paddingBottom: 5,\n          height: 65,\n        },\n        tabBarLabelStyle: {\n          fontSize: 12,\n          fontWeight: '500',\n          marginTop: 4,\n        },\n      }}>\n      <Tabs.Screen\n        name=\"index\"\n        options={{\n          title: 'Home',\n          tabBarIcon: ({ color, size }) => (\n            <Home color={color} size={size} />\n          ),\n        }}\n      />\n      <Tabs.Screen\n        name=\"reports\"\n        options={{\n          title: 'Reports',\n          tabBarIcon: ({ color, size }) => (\n            <FileText color={color} size={size} />\n          ),\n        }}\n      />\n      <Tabs.Screen\n        name=\"alerts\"\n        options={{\n          title: 'Alerts',\n          tabBarIcon: ({ color, size }) => (\n            <AlertCircle color={color} size={size} />\n          ),\n        }}\n      />\n      <Tabs.Screen\n        name=\"profile\"\n        options={{\n          title: 'Profile',\n          tabBarIcon: ({ color, size }) => (\n            <User color={color} size={size} />\n          ),\n        }}\n      />\n    </Tabs>\n  );\n}","size_bytes":1548},"frontend/app/app/(tabs)/alerts.tsx":{"content":"import React from 'react';\nimport { useState } from 'react';\nimport { View, Text, StyleSheet, SafeAreaView, ScrollView, TouchableOpacity } from 'react-native';\nimport { Bell, TriangleAlert as AlertTriangle, Info, CircleCheck as CheckCircle2, Settings } from 'lucide-react-native';\n\nconst alerts = [\n  {\n    id: 1,\n    type: 'update',\n    title: 'Issue Update',\n    message: 'Your pothole report on Main Street has been assigned to a repair crew.',\n    time: '5 minutes ago',\n    icon: Info,\n    color: '#4285F4',\n  },\n  {\n    id: 2,\n    type: 'resolved',\n    title: 'Issue Resolved',\n    message: 'The broken street light on Oak Street has been fixed.',\n    time: '2 hours ago',\n    icon: CheckCircle2,\n    color: '#10B981',\n  },\n  {\n    id: 3,\n    type: 'urgent',\n    title: 'Urgent Notice',\n    message: 'Water main break reported in your area. Temporary service disruption expected.',\n    time: '1 day ago',\n    icon: AlertTriangle,\n    color: '#EF4444',\n  },\n];\n\nexport default function AlertsScreen() {\n  const [showSettings, setShowSettings] = useState(false);\n\n  const handleSettingsPress = () => {\n    setShowSettings(true);\n    // You can implement alert settings modal here\n  };\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <View style={styles.header}>\n        <Text style={styles.headerTitle}>Alerts</Text>\n        <Text style={styles.headerSubtitle}>Stay updated on civic issues</Text>\n        <TouchableOpacity \n          style={styles.settingsButton}\n          onPress={handleSettingsPress}\n        >\n          <Settings color=\"#6B7280\" size={20} />\n        </TouchableOpacity>\n      </View>\n      \n      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>\n        {alerts.map((alert) => (\n          <TouchableOpacity key={alert.id} style={styles.alertCard} activeOpacity={0.7}>\n            <View style={styles.alertContent}>\n              <View style={[styles.iconContainer, { backgroundColor: `${alert.color}20` }]}>\n                <alert.icon color={alert.color} size={20} />\n              </View>\n              <View style={styles.alertText}>\n                <Text style={styles.alertTitle}>{alert.title}</Text>\n                <Text style={styles.alertMessage}>{alert.message}</Text>\n                <Text style={styles.alertTime}>{alert.time}</Text>\n              </View>\n            </View>\n          </TouchableOpacity>\n        ))}\n        \n        <View style={styles.emptyState}>\n          <Bell color=\"#D1D5DB\" size={48} />\n          <Text style={styles.emptyTitle}>You're all caught up!</Text>\n          <Text style={styles.emptyMessage}>\n            We'll notify you when there are updates on your reports or issues in your area.\n          </Text>\n        </View>\n      </ScrollView>\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#F8FAFC',\n  },\n  header: {\n    backgroundColor: '#FFFFFF',\n    paddingHorizontal: 20,\n    paddingTop: 20,\n    paddingBottom: 24,\n    borderBottomLeftRadius: 16,\n    borderBottomRightRadius: 16,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 8,\n    elevation: 4,\n  },\n  headerTitle: {\n    fontSize: 24,\n    fontWeight: '700',\n    color: '#1F2937',\n    marginBottom: 4,\n  },\n  headerSubtitle: {\n    fontSize: 14,\n    color: '#6B7280',\n    flex: 1,\n  },\n  settingsButton: {\n    padding: 8,\n  },\n  content: {\n    flex: 1,\n    paddingTop: 20,\n  },\n  alertCard: {\n    backgroundColor: '#FFFFFF',\n    marginHorizontal: 20,\n    marginBottom: 12,\n    borderRadius: 12,\n    padding: 16,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.06,\n    shadowRadius: 8,\n    elevation: 2,\n  },\n  alertContent: {\n    flexDirection: 'row',\n    alignItems: 'flex-start',\n  },\n  iconContainer: {\n    width: 40,\n    height: 40,\n    borderRadius: 10,\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginRight: 12,\n  },\n  alertText: {\n    flex: 1,\n  },\n  alertTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: '#1F2937',\n    marginBottom: 4,\n  },\n  alertMessage: {\n    fontSize: 14,\n    color: '#4B5563',\n    lineHeight: 20,\n    marginBottom: 8,\n  },\n  alertTime: {\n    fontSize: 12,\n    color: '#9CA3AF',\n  },\n  emptyState: {\n    alignItems: 'center',\n    paddingVertical: 40,\n    paddingHorizontal: 20,\n  },\n  emptyTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: '#6B7280',\n    marginTop: 16,\n    marginBottom: 8,\n  },\n  emptyMessage: {\n    fontSize: 14,\n    color: '#9CA3AF',\n    textAlign: 'center',\n    lineHeight: 20,\n  },\n});","size_bytes":4609},"frontend/app/app/(tabs)/index.tsx":{"content":"import React from 'react';\nimport { useState } from 'react';\nimport { View, Text, StyleSheet, ScrollView, TouchableOpacity, SafeAreaView } from 'react-native';\nimport { MapPin, Lightbulb, Trash2, Paintbrush, TrafficCone as Traffic, Droplets, Plus, CircleCheck as CheckCircle2, Clock, TriangleAlert as AlertTriangle } from 'lucide-react-native';\nimport ReportIssueModal from '../../components/ReportIssueModal';\n\nconst reportCategories = [\n  { id: 1, title: 'Pothole', icon: MapPin, color: '#6366F1' },\n  { id: 2, title: 'Street Light', icon: Lightbulb, color: '#F59E0B' },\n  { id: 3, title: 'Trash/Sanitation', icon: Trash2, color: '#6B7280' },\n  { id: 4, title: 'Graffiti', icon: Paintbrush, color: '#EF4444' },\n  { id: 5, title: 'Traffic Signal', icon: Traffic, color: '#DC2626' },\n  { id: 6, title: 'Water/Drainage', icon: Droplets, color: '#06B6D4' },\n];\n\nconst statusItems = [\n  { title: 'High Priority', color: '#EF4444' },\n  { title: 'Resolved', color: '#10B981' },\n  { title: 'In Progress', color: '#F59E0B' },\n  { title: 'Pending', color: '#9CA3AF' },\n];\n\nexport default function HomeScreen() {\n  const [showReportModal, setShowReportModal] = useState(false);\n  const [selectedCategory, setSelectedCategory] = useState<typeof reportCategories[0] | null>(null);\n\n  const handleCategoryPress = (category: typeof reportCategories[0]) => {\n    setSelectedCategory(category);\n    setShowReportModal(true);\n  };\n\n  const handleReportNewIssue = () => {\n    setSelectedCategory(null);\n    setShowReportModal(true);\n  };\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <ScrollView style={styles.scrollView} showsVerticalScrollIndicator={false}>\n        {/* Header */}\n        <View style={styles.header}>\n          <View style={styles.logoContainer}>\n            <View style={styles.logo}>\n              <CheckCircle2 color=\"#FFFFFF\" size={24} />\n            </View>\n            <View style={styles.headerText}>\n              <Text style={styles.appName}>CivicReport</Text>\n              <Text style={styles.tagline}>Report. Track. Resolve.</Text>\n            </View>\n          </View>\n        </View>\n\n        {/* Quick Report Section */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Quick Report</Text>\n          <View style={styles.categoryGrid}>\n            {reportCategories.map((category) => (\n              <TouchableOpacity\n                key={category.id}\n                style={styles.categoryCard}\n                activeOpacity={0.7}\n                onPress={() => handleCategoryPress(category)}\n              >\n                <View style={[styles.categoryIcon, { backgroundColor: `${category.color}20` }]}>\n                  <category.icon color={category.color} size={24} />\n                </View>\n                <Text style={styles.categoryTitle}>{category.title}</Text>\n              </TouchableOpacity>\n            ))}\n          </View>\n        </View>\n\n        {/* Report New Issue Button */}\n        <TouchableOpacity \n          style={styles.reportButton} \n          activeOpacity={0.8}\n          onPress={handleReportNewIssue}\n        >\n          <Plus color=\"#FFFFFF\" size={20} />\n          <Text style={styles.reportButtonText}>Report New Issue</Text>\n        </TouchableOpacity>\n\n        {/* Location Services */}\n        <View style={styles.locationContainer}>\n          <MapPin color=\"#10B981\" size={16} />\n          <Text style={styles.locationText}>Location services active</Text>\n        </View>\n\n        {/* Statistics */}\n        <View style={styles.statsContainer}>\n          <View style={styles.statCard}>\n            <View style={styles.statIconContainer}>\n              <AlertTriangle color=\"#EF4444\" size={20} />\n            </View>\n            <Text style={styles.statNumber}>12</Text>\n            <Text style={styles.statLabel}>Active Issues</Text>\n          </View>\n\n          <View style={styles.statCard}>\n            <View style={styles.statIconContainer}>\n              <Clock color=\"#4285F4\" size={20} />\n            </View>\n            <Text style={styles.statNumber}>2.4h</Text>\n            <Text style={styles.statLabel}>Avg. Response</Text>\n          </View>\n\n          <View style={styles.statCard}>\n            <View style={styles.statIconContainer}>\n              <CheckCircle2 color=\"#10B981\" size={20} />\n            </View>\n            <Text style={styles.statNumber}>89%</Text>\n            <Text style={styles.statLabel}>Resolved</Text>\n          </View>\n        </View>\n\n        {/* Issue Status */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Issue Status</Text>\n          <View style={styles.statusContainer}>\n            {statusItems.map((status, index) => (\n              <View key={index} style={styles.statusItem}>\n                <View style={[styles.statusDot, { backgroundColor: status.color }]} />\n                <Text style={styles.statusText}>{status.title}</Text>\n              </View>\n            ))}\n          </View>\n          <Text style={styles.statusNote}>Tap any marker for details</Text>\n        </View>\n      </ScrollView>\n      \n      <ReportIssueModal\n        visible={showReportModal}\n        onClose={() => setShowReportModal(false)}\n        selectedCategory={selectedCategory}\n      />\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#F8FAFC',\n  },\n  scrollView: {\n    flex: 1,\n  },\n  header: {\n    backgroundColor: '#FFFFFF',\n    paddingHorizontal: 20,\n    paddingTop: 20,\n    paddingBottom: 24,\n    borderBottomLeftRadius: 16,\n    borderBottomRightRadius: 16,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 8,\n    elevation: 4,\n  },\n  logoContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  logo: {\n    width: 40,\n    height: 40,\n    borderRadius: 12,\n    backgroundColor: '#4285F4',\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginRight: 12,\n  },\n  headerText: {\n    flex: 1,\n  },\n  appName: {\n    fontSize: 20,\n    fontWeight: '700',\n    color: '#1F2937',\n    marginBottom: 2,\n  },\n  tagline: {\n    fontSize: 14,\n    color: '#6B7280',\n    fontWeight: '500',\n  },\n  section: {\n    paddingHorizontal: 20,\n    paddingTop: 24,\n  },\n  sectionTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: '#1F2937',\n    marginBottom: 16,\n  },\n  categoryGrid: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    justifyContent: 'space-between',\n    gap: 12,\n  },\n  categoryCard: {\n    width: '48%',\n    backgroundColor: '#FFFFFF',\n    paddingVertical: 20,\n    paddingHorizontal: 16,\n    borderRadius: 12,\n    alignItems: 'center',\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.06,\n    shadowRadius: 8,\n    elevation: 2,\n    marginBottom: 12,\n  },\n  categoryIcon: {\n    width: 48,\n    height: 48,\n    borderRadius: 12,\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginBottom: 8,\n  },\n  categoryTitle: {\n    fontSize: 14,\n    fontWeight: '600',\n    color: '#374151',\n    textAlign: 'center',\n  },\n  reportButton: {\n    backgroundColor: '#4285F4',\n    marginHorizontal: 20,\n    marginTop: 24,\n    paddingVertical: 16,\n    borderRadius: 12,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    shadowColor: '#4285F4',\n    shadowOffset: { width: 0, height: 4 },\n    shadowOpacity: 0.3,\n    shadowRadius: 8,\n    elevation: 6,\n  },\n  reportButtonText: {\n    color: '#FFFFFF',\n    fontSize: 16,\n    fontWeight: '600',\n    marginLeft: 8,\n  },\n  locationContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginTop: 16,\n    paddingVertical: 8,\n  },\n  locationText: {\n    fontSize: 14,\n    color: '#10B981',\n    fontWeight: '500',\n    marginLeft: 6,\n  },\n  statsContainer: {\n    flexDirection: 'row',\n    paddingHorizontal: 20,\n    paddingTop: 24,\n    gap: 12,\n  },\n  statCard: {\n    flex: 1,\n    backgroundColor: '#FFFFFF',\n    paddingVertical: 20,\n    paddingHorizontal: 16,\n    borderRadius: 12,\n    alignItems: 'center',\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.06,\n    shadowRadius: 8,\n    elevation: 2,\n  },\n  statIconContainer: {\n    marginBottom: 8,\n  },\n  statNumber: {\n    fontSize: 24,\n    fontWeight: '700',\n    color: '#1F2937',\n    marginBottom: 4,\n  },\n  statLabel: {\n    fontSize: 12,\n    color: '#6B7280',\n    fontWeight: '500',\n    textAlign: 'center',\n  },\n  statusContainer: {\n    backgroundColor: '#FFFFFF',\n    borderRadius: 12,\n    paddingVertical: 20,\n    paddingHorizontal: 16,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.06,\n    shadowRadius: 8,\n    elevation: 2,\n  },\n  statusItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 16,\n  },\n  statusDot: {\n    width: 8,\n    height: 8,\n    borderRadius: 4,\n    marginRight: 12,\n  },\n  statusText: {\n    fontSize: 14,\n    color: '#374151',\n    fontWeight: '500',\n  },\n  statusNote: {\n    fontSize: 12,\n    color: '#9CA3AF',\n    textAlign: 'center',\n    marginTop: 16,\n    marginBottom: 24,\n  },\n});","size_bytes":9158},"frontend/app/app/(tabs)/profile.tsx":{"content":"import React from 'react';\nimport { useState } from 'react';\nimport { View, Text, StyleSheet, SafeAreaView, ScrollView, TouchableOpacity } from 'react-native';\nimport { Alert } from 'react-native';\nimport { User, Settings, Bell, MapPin, CircleHelp as HelpCircle, LogOut, ChevronRight, Award } from 'lucide-react-native';\n\nconst menuItems = [\n  { id: 1, title: 'Account Settings', icon: Settings, color: '#6B7280' },\n  { id: 2, title: 'Notifications', icon: Bell, color: '#F59E0B' },\n  { id: 3, title: 'Location Preferences', icon: MapPin, color: '#10B981' },\n  { id: 4, title: 'Help & Support', icon: HelpCircle, color: '#4285F4' },\n  { id: 5, title: 'Sign Out', icon: LogOut, color: '#EF4444' },\n];\n\nexport default function ProfileScreen() {\n  const handleMenuPress = (item: typeof menuItems[0]) => {\n    switch (item.id) {\n      case 1: // Account Settings\n        Alert.alert('Account Settings', 'Account settings functionality coming soon!');\n        break;\n      case 2: // Notifications\n        Alert.alert('Notifications', 'Notification preferences functionality coming soon!');\n        break;\n      case 3: // Location Preferences\n        Alert.alert('Location Preferences', 'Location settings functionality coming soon!');\n        break;\n      case 4: // Help & Support\n        Alert.alert('Help & Support', 'Help and support functionality coming soon!');\n        break;\n      case 5: // Sign Out\n        Alert.alert(\n          'Sign Out',\n          'Are you sure you want to sign out?',\n          [\n            { text: 'Cancel', style: 'cancel' },\n            { text: 'Sign Out', style: 'destructive', onPress: () => {\n              Alert.alert('Signed Out', 'You have been signed out successfully.');\n            }},\n          ]\n        );\n        break;\n    }\n  };\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <View style={styles.header}>\n        <Text style={styles.headerTitle}>Profile</Text>\n      </View>\n      \n      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>\n        {/* User Profile Section */}\n        <View style={styles.profileSection}>\n          <View style={styles.avatarContainer}>\n            <User color=\"#FFFFFF\" size={32} />\n          </View>\n          <Text style={styles.userName}>John Doe</Text>\n          <Text style={styles.userEmail}>john.doe@email.com</Text>\n          \n          {/* Stats */}\n          <View style={styles.statsContainer}>\n            <View style={styles.statItem}>\n              <Text style={styles.statNumber}>23</Text>\n              <Text style={styles.statLabel}>Reports Submitted</Text>\n            </View>\n            <View style={styles.statDivider} />\n            <View style={styles.statItem}>\n              <Text style={styles.statNumber}>18</Text>\n              <Text style={styles.statLabel}>Issues Resolved</Text>\n            </View>\n            <View style={styles.statDivider} />\n            <View style={styles.statItem}>\n              <Award color=\"#F59E0B\" size={24} />\n              <Text style={styles.statLabel}>Civic Champion</Text>\n            </View>\n          </View>\n        </View>\n\n        {/* Menu Items */}\n        <View style={styles.menuSection}>\n          {menuItems.map((item) => (\n            <TouchableOpacity \n              key={item.id} \n              style={styles.menuItem} \n              activeOpacity={0.7}\n              onPress={() => handleMenuPress(item)}\n            >\n              <View style={styles.menuItemLeft}>\n                <View style={[styles.menuIcon, { backgroundColor: `${item.color}20` }]}>\n                  <item.icon color={item.color} size={20} />\n                </View>\n                <Text style={styles.menuTitle}>{item.title}</Text>\n              </View>\n              <ChevronRight color=\"#D1D5DB\" size={20} />\n            </TouchableOpacity>\n          ))}\n        </View>\n\n        {/* App Info */}\n        <View style={styles.appInfo}>\n          <Text style={styles.appVersion}>CivicReport v1.0.0</Text>\n          <Text style={styles.appDescription}>\n            Making our communities better, one report at a time.\n          </Text>\n        </View>\n      </ScrollView>\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#F8FAFC',\n  },\n  header: {\n    backgroundColor: '#FFFFFF',\n    paddingHorizontal: 20,\n    paddingTop: 20,\n    paddingBottom: 24,\n    borderBottomLeftRadius: 16,\n    borderBottomRightRadius: 16,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 8,\n    elevation: 4,\n  },\n  headerTitle: {\n    fontSize: 24,\n    fontWeight: '700',\n    color: '#1F2937',\n  },\n  content: {\n    flex: 1,\n    paddingTop: 20,\n  },\n  profileSection: {\n    backgroundColor: '#FFFFFF',\n    marginHorizontal: 20,\n    borderRadius: 16,\n    padding: 24,\n    alignItems: 'center',\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.06,\n    shadowRadius: 8,\n    elevation: 2,\n    marginBottom: 20,\n  },\n  avatarContainer: {\n    width: 80,\n    height: 80,\n    borderRadius: 40,\n    backgroundColor: '#4285F4',\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginBottom: 16,\n  },\n  userName: {\n    fontSize: 20,\n    fontWeight: '700',\n    color: '#1F2937',\n    marginBottom: 4,\n  },\n  userEmail: {\n    fontSize: 14,\n    color: '#6B7280',\n    marginBottom: 24,\n  },\n  statsContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    width: '100%',\n  },\n  statItem: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  statNumber: {\n    fontSize: 24,\n    fontWeight: '700',\n    color: '#1F2937',\n    marginBottom: 4,\n  },\n  statLabel: {\n    fontSize: 12,\n    color: '#6B7280',\n    textAlign: 'center',\n  },\n  statDivider: {\n    width: 1,\n    height: 40,\n    backgroundColor: '#E5E7EB',\n    marginHorizontal: 16,\n  },\n  menuSection: {\n    backgroundColor: '#FFFFFF',\n    marginHorizontal: 20,\n    borderRadius: 16,\n    marginBottom: 20,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.06,\n    shadowRadius: 8,\n    elevation: 2,\n  },\n  menuItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingHorizontal: 16,\n    paddingVertical: 16,\n    borderBottomWidth: 1,\n    borderBottomColor: '#F3F4F6',\n  },\n  menuItemLeft: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  menuIcon: {\n    width: 36,\n    height: 36,\n    borderRadius: 8,\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginRight: 12,\n  },\n  menuTitle: {\n    fontSize: 16,\n    fontWeight: '500',\n    color: '#374151',\n  },\n  appInfo: {\n    alignItems: 'center',\n    paddingHorizontal: 20,\n    paddingVertical: 24,\n  },\n  appVersion: {\n    fontSize: 14,\n    color: '#9CA3AF',\n    marginBottom: 8,\n  },\n  appDescription: {\n    fontSize: 12,\n    color: '#D1D5DB',\n    textAlign: 'center',\n    lineHeight: 16,\n  },\n});","size_bytes":6927},"frontend/app/app/(tabs)/reports.tsx":{"content":"import React from 'react';\nimport { useState } from 'react';\nimport { View, Text, StyleSheet, SafeAreaView, ScrollView, TouchableOpacity } from 'react-native';\nimport { FileText, Calendar, MapPin, Clock, Plus } from 'lucide-react-native';\nimport ReportIssueModal from '../../components/ReportIssueModal';\n\nconst reportItems = [\n  {\n    id: 1,\n    title: 'Pothole on Main Street',\n    status: 'In Progress',\n    date: '2 days ago',\n    location: 'Main St & 2nd Ave',\n    priority: 'High',\n  },\n  {\n    id: 2,\n    title: 'Broken Street Light',\n    status: 'Resolved',\n    date: '1 week ago',\n    location: 'Oak Street',\n    priority: 'Medium',\n  },\n  {\n    id: 3,\n    title: 'Graffiti Removal Needed',\n    status: 'Pending',\n    date: '3 days ago',\n    location: 'Community Center',\n    priority: 'Low',\n  },\n];\n\nconst getStatusColor = (status: string) => {\n  switch (status) {\n    case 'In Progress': return '#F59E0B';\n    case 'Resolved': return '#10B981';\n    case 'Pending': return '#9CA3AF';\n    default: return '#6B7280';\n  }\n};\n\nconst getPriorityColor = (priority: string) => {\n  switch (priority) {\n    case 'High': return '#EF4444';\n    case 'Medium': return '#F59E0B';\n    case 'Low': return '#10B981';\n    default: return '#6B7280';\n  }\n};\n\nexport default function ReportsScreen() {\n  const [showReportModal, setShowReportModal] = useState(false);\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <View style={styles.header}>\n        <Text style={styles.headerTitle}>My Reports</Text>\n        <Text style={styles.headerSubtitle}>Track your submitted issues</Text>\n        <TouchableOpacity \n          style={styles.addButton}\n          onPress={() => setShowReportModal(true)}\n        >\n          <Plus color=\"#4285F4\" size={20} />\n        </TouchableOpacity>\n      </View>\n      \n      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>\n        {reportItems.map((item) => (\n          <TouchableOpacity key={item.id} style={styles.reportCard} activeOpacity={0.7}>\n            <View style={styles.reportHeader}>\n              <Text style={styles.reportTitle}>{item.title}</Text>\n              <View style={[styles.statusBadge, { backgroundColor: `${getStatusColor(item.status)}20` }]}>\n                <Text style={[styles.statusText, { color: getStatusColor(item.status) }]}>\n                  {item.status}\n                </Text>\n              </View>\n            </View>\n            \n            <View style={styles.reportDetails}>\n              <View style={styles.detailRow}>\n                <Calendar color=\"#6B7280\" size={14} />\n                <Text style={styles.detailText}>{item.date}</Text>\n              </View>\n              <View style={styles.detailRow}>\n                <MapPin color=\"#6B7280\" size={14} />\n                <Text style={styles.detailText}>{item.location}</Text>\n              </View>\n              <View style={styles.detailRow}>\n                <View style={[styles.priorityDot, { backgroundColor: getPriorityColor(item.priority) }]} />\n                <Text style={styles.detailText}>{item.priority} Priority</Text>\n              </View>\n            </View>\n          </TouchableOpacity>\n        ))}\n      </ScrollView>\n      \n      <ReportIssueModal\n        visible={showReportModal}\n        onClose={() => setShowReportModal(false)}\n        selectedCategory={null}\n      />\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#F8FAFC',\n  },\n  header: {\n    backgroundColor: '#FFFFFF',\n    paddingHorizontal: 20,\n    paddingTop: 20,\n    paddingBottom: 24,\n    borderBottomLeftRadius: 16,\n    borderBottomRightRadius: 16,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 8,\n    elevation: 4,\n  },\n  headerTitle: {\n    fontSize: 24,\n    fontWeight: '700',\n    color: '#1F2937',\n    marginBottom: 4,\n  },\n  headerSubtitle: {\n    fontSize: 14,\n    color: '#6B7280',\n    flex: 1,\n  },\n  addButton: {\n    padding: 8,\n  },\n  content: {\n    flex: 1,\n    paddingTop: 20,\n  },\n  reportCard: {\n    backgroundColor: '#FFFFFF',\n    marginHorizontal: 20,\n    marginBottom: 16,\n    borderRadius: 12,\n    padding: 16,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.06,\n    shadowRadius: 8,\n    elevation: 2,\n  },\n  reportHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'flex-start',\n    marginBottom: 12,\n  },\n  reportTitle: {\n    flex: 1,\n    fontSize: 16,\n    fontWeight: '600',\n    color: '#1F2937',\n    marginRight: 12,\n  },\n  statusBadge: {\n    paddingHorizontal: 8,\n    paddingVertical: 4,\n    borderRadius: 6,\n  },\n  statusText: {\n    fontSize: 12,\n    fontWeight: '600',\n  },\n  reportDetails: {\n    gap: 8,\n  },\n  detailRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n  },\n  detailText: {\n    fontSize: 14,\n    color: '#6B7280',\n  },\n  priorityDot: {\n    width: 8,\n    height: 8,\n    borderRadius: 4,\n  },\n});","size_bytes":5009},"frontend/dashboard/src/lib/utilis.ts":{"content":"import { type ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n","size_bytes":169},"frontend/dashboard/src/lib/utils.ts":{"content":"import { type ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n","size_bytes":169},"frontend/dashboard/src/components/Layout/Layout.tsx":{"content":"import React from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { Button } from '../ui/button';\nimport { Input } from '../ui/input';\n\ninterface LayoutProps {\n  children: React.ReactNode;\n}\n\nexport const Layout = ({ children }: LayoutProps): JSX.Element => {\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  const navigationItems = [\n    {\n      label: \"Dashboard\",\n      icon: \"/image-1.png\",\n      path: \"/dashboard\",\n    },\n    {\n      label: \"Work Order\",\n      icon: \"/image-2.png\",\n      path: \"/work-order\",\n    },\n    {\n      label: \"Insights\",\n      icon: \"/image-3.png\",\n      path: \"/insights\",\n    },\n    {\n      label: \"Settings\",\n      icon: \"/image-4.png\",\n      path: \"/settings\",\n    },\n  ];\n\n  return (\n    <div className=\"bg-white overflow-hidden w-full min-h-screen flex\">\n      {/* Left Sidebar */}\n      <aside className=\"w-[314px] h-screen bg-neutral-50 border border-solid border-[#b6bdc6] flex flex-col\">\n        {/* Profile Section */}\n        <div className=\"p-5 pt-[27px]\">\n          <div className=\"w-[75px] h-[75px] rounded-[37.5px] bg-[linear-gradient(180deg,rgba(15,176,166,1)_0%,rgba(14,168,206,1)_100%)]\" />\n          <div className=\"mt-5 [font-family:'Inter',Helvetica] font-normal text-[#000000b2] text-xl tracking-[0] leading-[normal]\">\n            Overview\n          </div>\n        </div>\n\n        {/* Navigation Menu */}\n        <nav className=\"px-2.5 mt-[22px]\">\n          <div className=\"w-[294px] space-y-[9px]\">\n            {navigationItems.map((item, index) => (\n              <button\n                key={index}\n                onClick={() => navigate(item.path)}\n                className={`w-full h-12 rounded-[15px] flex items-center px-[13px] transition-colors hover:bg-slate-200 ${\n                  location.pathname === item.path ? \"bg-slate-100\" : \"\"\n                }`}\n              >\n                <img\n                  className=\"w-8 h-8 object-cover\"\n                  alt={item.label}\n                  src={item.icon}\n                />\n                <span className=\"ml-[11px] [font-family:'Inter',Helvetica] font-bold text-black text-2xl tracking-[0] leading-[normal]\">\n                  {item.label}\n                </span>\n              </button>\n            ))}\n          </div>\n        </nav>\n      </aside>\n\n      {/* Main Content */}\n      <main className=\"flex-1 flex flex-col\">\n        {/* Top Header */}\n        <header className=\"h-[115px] bg-white border-2 border-solid border-[#b6bdc6] flex items-center justify-between px-5\">\n          {/* Search Section */}\n          <div className=\"flex items-center gap-[34px] ml-[50px]\">\n            <div className=\"w-[581px] h-[58px] bg-white rounded-[15px] border-2 border-solid border-[#b6bcc5] relative\">\n              <Input \n                className=\"w-full h-full border-0 rounded-[15px] bg-transparent px-4 text-lg\" \n                placeholder=\"Search...\"\n              />\n            </div>\n            <Button className=\"w-[131px] h-[58px] bg-[#10b77f] hover:bg-[#0ea06e] rounded-[15px] border-2 border-solid border-[#b6bcc5] text-white text-xl [font-family:'Inter',Helvetica] font-normal\">\n              Search\n            </Button>\n          </div>\n\n          {/* User Profile */}\n          <button \n            onClick={() => navigate('/login')}\n            className=\"w-[187px] h-[58px] bg-white rounded-[15px] border-2 border-solid border-[#b6bcc5] flex items-center px-[13px] hover:bg-gray-50 transition-colors cursor-pointer\"\n          >\n            <div className=\"w-[35px] h-[35px] rounded-[17.5px] bg-[linear-gradient(180deg,rgba(15,176,166,1)_0%,rgba(14,168,206,1)_100%)]\" />\n            <div className=\"ml-[11px]\">\n              <div className=\"[font-family:'Inter',Helvetica] font-bold text-black text-xl tracking-[0] leading-[normal]\">\n                User\n              </div>\n              <div className=\"[font-family:'Inter',Helvetica] font-normal text-black text-[15px] tracking-[0] leading-[normal]\">\n                Admin\n              </div>\n            </div>\n          </button>\n        </header>\n\n        {/* Page Content */}\n        <div className=\"flex-1 overflow-auto\">\n          {children}\n        </div>\n      </main>\n    </div>\n  );\n};","size_bytes":4248},"frontend/dashboard/src/components/ui/avatar.tsx":{"content":"\"use client\";\n\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\";\nimport * as React from \"react\";\nimport { cn } from \"../../lib/utils\";\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className,\n    )}\n    {...props}\n  />\n));\nAvatar.displayName = AvatarPrimitive.Root.displayName;\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n));\nAvatarImage.displayName = AvatarPrimitive.Image.displayName;\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className,\n    )}\n    {...props}\n  />\n));\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName;\n\nexport { Avatar, AvatarImage, AvatarFallback };\n","size_bytes":1435},"frontend/dashboard/src/components/ui/badge.tsx":{"content":"import { type VariantProps, cva } from \"class-variance-authority\";\nimport * as React from \"react\";\nimport { cn } from \"../../lib/utils\";\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n);\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants };\n","size_bytes":1150},"frontend/dashboard/src/components/ui/button.tsx":{"content":"import { Slot } from \"@radix-ui/react-slot\";\nimport { type VariantProps, cva } from \"class-variance-authority\";\nimport * as React from \"react\";\nimport { cn } from \"../../lib/utils\";\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-8 rounded-md px-3 text-xs\",\n        lg: \"h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n);\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\";\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    );\n  },\n);\nButton.displayName = \"Button\";\n\nexport { Button, buttonVariants };\n","size_bytes":1918},"frontend/dashboard/src/components/ui/card.tsx":{"content":"import * as React from \"react\";\nimport { cn } from \"../../lib/utils\";\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-xl border bg-card text-card-foreground shadow\",\n      className,\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\";\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\";\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"font-semibold leading-none tracking-tight\", className)}\n    {...props}\n  />\n));\nCardTitle.displayName = \"CardTitle\";\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\";\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n));\nCardContent.displayName = \"CardContent\";\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n));\nCardFooter.displayName = \"CardFooter\";\n\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n};\n","size_bytes":1860},"frontend/dashboard/src/components/ui/input.tsx":{"content":"import * as React from \"react\";\nimport { cn } from \"../../lib/utils\";\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className,\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  },\n);\nInput.displayName = \"Input\";\n\nexport { Input };\n","size_bytes":779},"frontend/dashboard/src/components/ui/select.tsx":{"content":"\"use client\";\n\nimport * as SelectPrimitive from \"@radix-ui/react-select\";\nimport { CheckIcon, ChevronDownIcon, ChevronUpIcon } from \"lucide-react\";\nimport * as React from \"react\";\nimport { cn } from \"../../lib/utils\";\n\nconst Select = SelectPrimitive.Root;\n\nconst SelectGroup = SelectPrimitive.Group;\n\nconst SelectValue = SelectPrimitive.Value;\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className,\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDownIcon className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n));\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName;\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className,\n    )}\n    {...props}\n  >\n    <ChevronUpIcon className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n));\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName;\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className,\n    )}\n    {...props}\n  >\n    <ChevronDownIcon className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n));\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName;\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className,\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\",\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n));\nSelectContent.displayName = SelectPrimitive.Content.displayName;\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"px-2 py-1.5 text-sm font-semibold\", className)}\n    {...props}\n  />\n));\nSelectLabel.displayName = SelectPrimitive.Label.displayName;\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className,\n    )}\n    {...props}\n  >\n    <span className=\"absolute right-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <CheckIcon className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n));\nSelectItem.displayName = SelectPrimitive.Item.displayName;\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n));\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName;\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n};\n","size_bytes":5692},"frontend/dashboard/src/components/ui/table.tsx":{"content":"import * as React from \"react\";\nimport { cn } from \"../../lib/utils\";\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n));\nTable.displayName = \"Table\";\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n));\nTableHeader.displayName = \"TableHeader\";\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n));\nTableBody.displayName = \"TableBody\";\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className,\n    )}\n    {...props}\n  />\n));\nTableFooter.displayName = \"TableFooter\";\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className,\n    )}\n    {...props}\n  />\n));\nTableRow.displayName = \"TableRow\";\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-10 px-2 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\n      className,\n    )}\n    {...props}\n  />\n));\nTableHead.displayName = \"TableHead\";\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\n      \"p-2 align-middle [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\n      className,\n    )}\n    {...props}\n  />\n));\nTableCell.displayName = \"TableCell\";\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nTableCaption.displayName = \"TableCaption\";\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n};\n","size_bytes":2885},"frontend/dashboard/src/components/ui/tabs.tsx":{"content":"import * as TabsPrimitive from \"@radix-ui/react-tabs\";\nimport * as React from \"react\";\nimport { cn } from \"../../lib/utils\";\n\nconst Tabs = TabsPrimitive.Root;\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-9 items-center justify-center rounded-lg bg-muted p-1 text-muted-foreground\",\n      className,\n    )}\n    {...props}\n  />\n));\nTabsList.displayName = TabsPrimitive.List.displayName;\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow\",\n      className,\n    )}\n    {...props}\n  />\n));\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName;\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className,\n    )}\n    {...props}\n  />\n));\nTabsContent.displayName = TabsPrimitive.Content.displayName;\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent };\n","size_bytes":1894},"frontend/dashboard/src/screens/Dashboard/Dashboard.tsx":{"content":"import React from \"react\";\nimport { Tabs, TabsList, TabsTrigger } from \"../../components/ui/tabs\";\nimport { Layout } from \"../../components/Layout/Layout\";\nimport { DashboardStatsSection } from \"./sections/DashboardStatsSection/DashboardStatsSection\";\nimport { IssueListSection } from \"./sections/IssueListSection/IssueListSection\";\nimport { MapView } from \"./sections/MapView/MapView\";\nimport { AnalyticsView } from \"./sections/AnalyticsView/AnalyticsView\";\n\nexport const Dashboard = (): JSX.Element => {\n  const [activeTab, setActiveTab] = React.useState(\"list\");\n\n  return (\n    <Layout>\n      <div className=\"p-6\">\n        {/* Dashboard Stats Section */}\n        <DashboardStatsSection />\n\n        {/* View Toggle Tabs */}\n        <div className=\"mt-8 mb-8\">\n          <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-[386px]\">\n            <TabsList className=\"w-full h-[69px] bg-slate-100 rounded-[15px] p-0\">\n              <TabsTrigger\n                value=\"map\"\n                className=\"flex-1 h-[54px] text-[28px] [font-family:'Inter',Helvetica] font-bold text-[#00000099] data-[state=active]:bg-white data-[state=active]:text-black data-[state=active]:rounded-[10px] data-[state=active]:mx-2 data-[state=active]:my-[7.5px]\"\n              >\n                Map\n              </TabsTrigger>\n              <TabsTrigger\n                value=\"list\"\n                className=\"flex-1 h-[54px] text-[28px] [font-family:'Inter',Helvetica] font-bold text-[#00000099] data-[state=active]:bg-white data-[state=active]:text-black data-[state=active]:rounded-[10px] data-[state=active]:mx-2 data-[state=active]:my-[7.5px]\"\n              >\n                List\n              </TabsTrigger>\n              <TabsTrigger\n                value=\"analytics\"\n                className=\"flex-1 h-[54px] text-[28px] [font-family:'Inter',Helvetica] font-bold text-[#00000099] data-[state=active]:bg-white data-[state=active]:text-black data-[state=active]:rounded-[10px] data-[state=active]:mx-2 data-[state=active]:my-[7.5px]\"\n              >\n                Analytics\n              </TabsTrigger>\n            </TabsList>\n          </Tabs>\n        </div>\n\n        {/* Content based on active tab */}\n        {activeTab === \"list\" && <IssueListSection />}\n        {activeTab === \"map\" && <MapView />}\n        {activeTab === \"analytics\" && <AnalyticsView />}\n      </div>\n    </Layout>\n  );\n};\n","size_bytes":2398},"frontend/dashboard/src/screens/Insights/Insights.tsx":{"content":"import React from \"react\";\nimport { Layout } from \"../../components/Layout/Layout\";\n\nexport const Insights = (): JSX.Element => {\n  const insights = [\n    {\n      title: \"Peak Issue Hours\",\n      description: \"Most issues are reported between 8 AM - 10 AM and 5 PM - 7 PM\",\n      metric: \"67%\",\n      trend: \"up\",\n    },\n    {\n      title: \"Resolution Time\",\n      description: \"Average time to resolve issues has improved by 23% this month\",\n      metric: \"4.2 days\",\n      trend: \"down\",\n    },\n    {\n      title: \"Citizen Satisfaction\",\n      description: \"Overall satisfaction rating from resolved issue feedback\",\n      metric: \"4.6/5\",\n      trend: \"up\",\n    },\n    {\n      title: \"Department Efficiency\",\n      description: \"Road Department leads in fastest response times\",\n      metric: \"2.1 hours\",\n      trend: \"up\",\n    },\n  ];\n\n  const topIssues = [\n    { type: \"Potholes\", count: 234, percentage: 35 },\n    { type: \"Street Lighting\", count: 156, percentage: 23 },\n    { type: \"Water Leaks\", count: 123, percentage: 18 },\n    { type: \"Trash Collection\", count: 89, percentage: 13 },\n    { type: \"Traffic Signals\", count: 67, percentage: 11 },\n  ];\n\n  return (\n    <Layout>\n      <div className=\"p-6\">\n        <div className=\"flex flex-col gap-6\">\n          {/* Header */}\n          <div>\n            <h1 className=\"text-4xl font-bold text-black mb-2\">Insights & Analytics</h1>\n            <p className=\"text-xl text-gray-600\">Data-driven insights to improve city services</p>\n          </div>\n\n          {/* Key Insights Grid */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            {insights.map((insight, index) => (\n              <div key={index} className=\"bg-white rounded-[15px] border border-solid border-[#b6bdc6] p-6\">\n                <div className=\"flex items-start justify-between mb-3\">\n                  <h3 className=\"font-bold text-lg text-gray-900\">{insight.title}</h3>\n                  <div className={`w-3 h-3 rounded-full ${insight.trend === 'up' ? 'bg-green-500' : 'bg-red-500'}`}></div>\n                </div>\n                <div className=\"text-3xl font-bold text-[#10b77f] mb-2\">{insight.metric}</div>\n                <p className=\"text-sm text-gray-600\">{insight.description}</p>\n              </div>\n            ))}\n          </div>\n\n          {/* Charts and Analysis */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Top Issue Types */}\n            <div className=\"bg-white rounded-[15px] border border-solid border-[#b6bdc6] p-6\">\n              <h3 className=\"text-xl font-bold text-gray-900 mb-4\">Top Issue Types</h3>\n              <div className=\"space-y-4\">\n                {topIssues.map((issue, index) => (\n                  <div key={index} className=\"flex items-center justify-between\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex justify-between items-center mb-1\">\n                        <span className=\"font-medium text-gray-700\">{issue.type}</span>\n                        <span className=\"text-sm text-gray-500\">{issue.count} issues</span>\n                      </div>\n                      <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                        <div \n                          className=\"bg-[#10b77f] h-2 rounded-full\" \n                          style={{ width: `${issue.percentage}%` }}\n                        ></div>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            {/* Monthly Trends */}\n            <div className=\"bg-white rounded-[15px] border border-solid border-[#b6bdc6] p-6\">\n              <h3 className=\"text-xl font-bold text-gray-900 mb-4\">Monthly Trends</h3>\n              <div className=\"flex items-center justify-center h-[300px] bg-gray-50 rounded-lg\">\n                <div className=\"text-center\">\n                  <div className=\"w-16 h-16 bg-[#25abe9] rounded-full flex items-center justify-center mb-4 mx-auto\">\n                    <svg className=\"w-8 h-8 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M7 12l3-3 3 3 4-4M8 21l4-4 4 4M3 4h18M4 4h16v12a1 1 0 01-1 1H5a1 1 0 01-1-1V4z\" />\n                    </svg>\n                  </div>\n                  <p className=\"text-gray-600\">Interactive trend charts showing issue patterns over time</p>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Performance Metrics */}\n          <div className=\"bg-white rounded-[15px] border border-solid border-[#b6bdc6] p-6\">\n            <h3 className=\"text-xl font-bold text-gray-900 mb-4\">Department Performance</h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              <div className=\"text-center p-4 bg-blue-50 rounded-lg\">\n                <div className=\"text-2xl font-bold text-blue-600\">Road Dept</div>\n                <div className=\"text-sm text-blue-700 mt-1\">Avg Response: 2.1 hours</div>\n                <div className=\"text-xs text-gray-600 mt-1\">Resolution Rate: 89%</div>\n              </div>\n              <div className=\"text-center p-4 bg-green-50 rounded-lg\">\n                <div className=\"text-2xl font-bold text-green-600\">Water Dept</div>\n                <div className=\"text-sm text-green-700 mt-1\">Avg Response: 3.4 hours</div>\n                <div className=\"text-xs text-gray-600 mt-1\">Resolution Rate: 92%</div>\n              </div>\n              <div className=\"text-center p-4 bg-purple-50 rounded-lg\">\n                <div className=\"text-2xl font-bold text-purple-600\">Electric Dept</div>\n                <div className=\"text-sm text-purple-700 mt-1\">Avg Response: 1.8 hours</div>\n                <div className=\"text-xs text-gray-600 mt-1\">Resolution Rate: 95%</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </Layout>\n  );\n};","size_bytes":6010},"frontend/dashboard/src/screens/Login/Login.tsx":{"content":"import React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Button } from '../../components/ui/button';\nimport { Input } from '../../components/ui/input';\nimport { Card } from '../../components/ui/card';\n\nexport const Login = (): JSX.Element => {\n  const navigate = useNavigate();\n  const [formData, setFormData] = useState({\n    email: '',\n    password: ''\n  });\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n    \n    // Simulate login process\n    setTimeout(() => {\n      setIsLoading(false);\n      navigate('/dashboard');\n    }, 1500);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-[#10b77f] to-[#25abe9] flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md bg-white rounded-[20px] shadow-2xl p-8\">\n        <div className=\"text-center mb-8\">\n          <div className=\"w-20 h-20 bg-gradient-to-r from-[#10b77f] to-[#25abe9] rounded-full mx-auto mb-4 flex items-center justify-center\">\n            <svg className=\"w-10 h-10 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4\" />\n            </svg>\n          </div>\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">City Admin Portal</h1>\n          <p className=\"text-gray-600\">Sign in to manage city services</p>\n        </div>\n\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          <div>\n            <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Email Address\n            </label>\n            <Input\n              id=\"email\"\n              name=\"email\"\n              type=\"email\"\n              required\n              value={formData.email}\n              onChange={handleInputChange}\n              className=\"h-12 border-2 border-gray-300 rounded-lg focus:border-[#10b77f] focus:ring-[#10b77f]\"\n              placeholder=\"admin@city.gov\"\n            />\n          </div>\n\n          <div>\n            <label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Password\n            </label>\n            <Input\n              id=\"password\"\n              name=\"password\"\n              type=\"password\"\n              required\n              value={formData.password}\n              onChange={handleInputChange}\n              className=\"h-12 border-2 border-gray-300 rounded-lg focus:border-[#10b77f] focus:ring-[#10b77f]\"\n              placeholder=\"Enter your password\"\n            />\n          </div>\n\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center\">\n              <input\n                id=\"remember-me\"\n                name=\"remember-me\"\n                type=\"checkbox\"\n                className=\"h-4 w-4 text-[#10b77f] focus:ring-[#10b77f] border-gray-300 rounded\"\n              />\n              <label htmlFor=\"remember-me\" className=\"ml-2 block text-sm text-gray-700\">\n                Remember me\n              </label>\n            </div>\n            <button type=\"button\" className=\"text-sm text-[#10b77f] hover:text-[#0ea06e] font-medium\">\n              Forgot password?\n            </button>\n          </div>\n\n          <Button\n            type=\"submit\"\n            disabled={isLoading}\n            className=\"w-full h-12 bg-gradient-to-r from-[#10b77f] to-[#25abe9] hover:from-[#0ea06e] to-[#2196d3] text-white font-bold text-lg rounded-lg transition-all duration-200\"\n          >\n            {isLoading ? (\n              <div className=\"flex items-center justify-center\">\n                <div className=\"animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2\"></div>\n                Signing in...\n              </div>\n            ) : (\n              'Sign In'\n            )}\n          </Button>\n        </form>\n\n        <div className=\"mt-8 text-center\">\n          <p className=\"text-sm text-gray-600\">\n            Demo credentials: admin@city.gov / password\n          </p>\n        </div>\n\n        <div className=\"mt-6 pt-6 border-t border-gray-200\">\n          <div className=\"text-center\">\n            <p className=\"text-xs text-gray-500\">\n              City Issue Management System v2.0\n            </p>\n            <p className=\"text-xs text-gray-500 mt-1\">\n              Secure • Reliable • Efficient\n            </p>\n          </div>\n        </div>\n      </Card>\n    </div>\n  );\n};","size_bytes":4857},"frontend/dashboard/src/screens/Settings/Settings.tsx":{"content":"import React from \"react\";\nimport { Layout } from \"../../components/Layout/Layout\";\nimport { Button } from \"../../components/ui/button\";\nimport { Input } from \"../../components/ui/input\";\nimport { Badge } from \"../../components/ui/badge\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"../../components/ui/select\";\n\nexport const Settings = (): JSX.Element => {\n  const [activeSection, setActiveSection] = React.useState(\"general\");\n\n  const menuItems = [\n    { id: \"general\", label: \"General Settings\", icon: \"⚙️\" },\n    { id: \"users\", label: \"User Management\", icon: \"👥\" },\n    { id: \"departments\", label: \"Departments\", icon: \"🏢\" },\n    { id: \"notifications\", label: \"Notifications\", icon: \"🔔\" },\n    { id: \"integrations\", label: \"Integrations\", icon: \"🔗\" },\n  ];\n\n  const users = [\n    { name: \"John Smith\", email: \"john@city.gov\", role: \"Admin\", department: \"Road\", status: \"Active\" },\n    { name: \"Sarah Johnson\", email: \"sarah@city.gov\", role: \"Manager\", department: \"Water\", status: \"Active\" },\n    { name: \"Mike Davis\", email: \"mike@city.gov\", role: \"Technician\", department: \"Electric\", status: \"Inactive\" },\n  ];\n\n  const departments = [\n    { name: \"Road Department\", head: \"John Smith\", staff: 12, activeIssues: 45 },\n    { name: \"Water Department\", head: \"Sarah Johnson\", staff: 8, activeIssues: 23 },\n    { name: \"Electric Department\", head: \"Mike Davis\", staff: 6, activeIssues: 18 },\n    { name: \"Sanitation\", head: \"Lisa Brown\", staff: 15, activeIssues: 31 },\n  ];\n\n  return (\n    <Layout>\n      <div className=\"p-6\">\n        <div className=\"flex flex-col gap-6\">\n          {/* Header */}\n          <div>\n            <h1 className=\"text-4xl font-bold text-black mb-2\">Settings</h1>\n            <p className=\"text-xl text-gray-600\">Configure system settings and manage users</p>\n          </div>\n\n          <div className=\"flex gap-6\">\n            {/* Settings Menu */}\n            <div className=\"w-64 bg-white rounded-[15px] border border-solid border-[#b6bdc6] p-4\">\n              <nav className=\"space-y-2\">\n                {menuItems.map((item) => (\n                  <button\n                    key={item.id}\n                    onClick={() => setActiveSection(item.id)}\n                    className={`w-full text-left px-4 py-3 rounded-lg transition-colors ${\n                      activeSection === item.id \n                        ? 'bg-[#10b77f] text-white' \n                        : 'hover:bg-gray-100 text-gray-700'\n                    }`}\n                  >\n                    <span className=\"mr-3\">{item.icon}</span>\n                    {item.label}\n                  </button>\n                ))}\n              </nav>\n            </div>\n\n            {/* Settings Content */}\n            <div className=\"flex-1 bg-white rounded-[15px] border border-solid border-[#b6bdc6] p-6\">\n              {activeSection === \"general\" && (\n                <div className=\"space-y-6\">\n                  <h2 className=\"text-2xl font-bold text-gray-900\">General Settings</h2>\n                  \n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                        System Name\n                      </label>\n                      <Input \n                        defaultValue=\"City Issue Management System\" \n                        className=\"h-12 border-2 border-[#b6bcc5]\"\n                      />\n                    </div>\n                    \n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                        Default Priority\n                      </label>\n                      <Select defaultValue=\"medium\">\n                        <SelectTrigger className=\"h-12 border-2 border-[#b6bcc5]\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"low\">Low</SelectItem>\n                          <SelectItem value=\"medium\">Medium</SelectItem>\n                          <SelectItem value=\"high\">High</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n\n                  <div className=\"flex gap-4\">\n                    <Button className=\"bg-[#10b77f] hover:bg-[#0ea06e] text-white\">\n                      Save Changes\n                    </Button>\n                    <Button variant=\"outline\">\n                      Reset to Default\n                    </Button>\n                  </div>\n                </div>\n              )}\n\n              {activeSection === \"users\" && (\n                <div className=\"space-y-6\">\n                  <div className=\"flex justify-between items-center\">\n                    <h2 className=\"text-2xl font-bold text-gray-900\">User Management</h2>\n                    <Button className=\"bg-[#10b77f] hover:bg-[#0ea06e] text-white\">\n                      Add New User\n                    </Button>\n                  </div>\n\n                  <div className=\"overflow-hidden border border-[#b6bdc6] rounded-lg\">\n                    <table className=\"w-full\">\n                      <thead className=\"bg-gray-50\">\n                        <tr>\n                          <th className=\"px-6 py-3 text-left text-sm font-medium text-gray-900\">Name</th>\n                          <th className=\"px-6 py-3 text-left text-sm font-medium text-gray-900\">Email</th>\n                          <th className=\"px-6 py-3 text-left text-sm font-medium text-gray-900\">Role</th>\n                          <th className=\"px-6 py-3 text-left text-sm font-medium text-gray-900\">Department</th>\n                          <th className=\"px-6 py-3 text-left text-sm font-medium text-gray-900\">Status</th>\n                        </tr>\n                      </thead>\n                      <tbody className=\"divide-y divide-gray-200\">\n                        {users.map((user, index) => (\n                          <tr key={index}>\n                            <td className=\"px-6 py-4 text-sm text-gray-900\">{user.name}</td>\n                            <td className=\"px-6 py-4 text-sm text-gray-600\">{user.email}</td>\n                            <td className=\"px-6 py-4\">\n                              <Badge className=\"bg-blue-100 text-blue-800\">{user.role}</Badge>\n                            </td>\n                            <td className=\"px-6 py-4 text-sm text-gray-900\">{user.department}</td>\n                            <td className=\"px-6 py-4\">\n                              <Badge className={user.status === 'Active' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}>\n                                {user.status}\n                              </Badge>\n                            </td>\n                          </tr>\n                        ))}\n                      </tbody>\n                    </table>\n                  </div>\n                </div>\n              )}\n\n              {activeSection === \"departments\" && (\n                <div className=\"space-y-6\">\n                  <div className=\"flex justify-between items-center\">\n                    <h2 className=\"text-2xl font-bold text-gray-900\">Department Management</h2>\n                    <Button className=\"bg-[#10b77f] hover:bg-[#0ea06e] text-white\">\n                      Add Department\n                    </Button>\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    {departments.map((dept, index) => (\n                      <div key={index} className=\"border border-[#b6bdc6] rounded-lg p-6\">\n                        <h3 className=\"text-lg font-bold text-gray-900 mb-2\">{dept.name}</h3>\n                        <div className=\"space-y-2 text-sm text-gray-600\">\n                          <p><strong>Department Head:</strong> {dept.head}</p>\n                          <p><strong>Staff Count:</strong> {dept.staff}</p>\n                          <p><strong>Active Issues:</strong> {dept.activeIssues}</p>\n                        </div>\n                        <div className=\"mt-4 flex gap-2\">\n                          <Button size=\"sm\" variant=\"outline\">Edit</Button>\n                          <Button size=\"sm\" variant=\"outline\">View Details</Button>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n\n              {activeSection === \"notifications\" && (\n                <div className=\"space-y-6\">\n                  <h2 className=\"text-2xl font-bold text-gray-900\">Notification Settings</h2>\n                  \n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between p-4 border border-[#b6bdc6] rounded-lg\">\n                      <div>\n                        <h3 className=\"font-medium text-gray-900\">Email Notifications</h3>\n                        <p className=\"text-sm text-gray-600\">Receive email alerts for new issues</p>\n                      </div>\n                      <Button variant=\"outline\" size=\"sm\">Configure</Button>\n                    </div>\n                    \n                    <div className=\"flex items-center justify-between p-4 border border-[#b6bdc6] rounded-lg\">\n                      <div>\n                        <h3 className=\"font-medium text-gray-900\">SMS Alerts</h3>\n                        <p className=\"text-sm text-gray-600\">Get SMS notifications for urgent issues</p>\n                      </div>\n                      <Button variant=\"outline\" size=\"sm\">Configure</Button>\n                    </div>\n                    \n                    <div className=\"flex items-center justify-between p-4 border border-[#b6bdc6] rounded-lg\">\n                      <div>\n                        <h3 className=\"font-medium text-gray-900\">Dashboard Alerts</h3>\n                        <p className=\"text-sm text-gray-600\">Show real-time alerts on dashboard</p>\n                      </div>\n                      <Button variant=\"outline\" size=\"sm\">Configure</Button>\n                    </div>\n                  </div>\n                </div>\n              )}\n\n              {activeSection === \"integrations\" && (\n                <div className=\"space-y-6\">\n                  <h2 className=\"text-2xl font-bold text-gray-900\">System Integrations</h2>\n                  \n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    <div className=\"border border-[#b6bdc6] rounded-lg p-6\">\n                      <h3 className=\"text-lg font-bold text-gray-900 mb-2\">GIS Mapping</h3>\n                      <p className=\"text-sm text-gray-600 mb-4\">Connect with geographic information systems</p>\n                      <Badge className=\"bg-green-100 text-green-800 mb-4\">Connected</Badge>\n                      <div className=\"flex gap-2\">\n                        <Button size=\"sm\" variant=\"outline\">Configure</Button>\n                        <Button size=\"sm\" variant=\"outline\">Test Connection</Button>\n                      </div>\n                    </div>\n                    \n                    <div className=\"border border-[#b6bdc6] rounded-lg p-6\">\n                      <h3 className=\"text-lg font-bold text-gray-900 mb-2\">Mobile App API</h3>\n                      <p className=\"text-sm text-gray-600 mb-4\">API for citizen mobile application</p>\n                      <Badge className=\"bg-yellow-100 text-yellow-800 mb-4\">Pending</Badge>\n                      <div className=\"flex gap-2\">\n                        <Button size=\"sm\" variant=\"outline\">Setup</Button>\n                        <Button size=\"sm\" variant=\"outline\">Documentation</Button>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </Layout>\n  );\n};","size_bytes":12036},"frontend/dashboard/src/screens/WorkOrder/CreateWorkOrder.tsx":{"content":"import React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Layout } from '../../components/Layout/Layout';\nimport { Button } from '../../components/ui/button';\nimport { Input } from '../../components/ui/input';\nimport { Card } from '../../components/ui/card';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '../../components/ui/select';\n\nexport const CreateWorkOrder = (): JSX.Element => {\n  const navigate = useNavigate();\n  const [formData, setFormData] = useState({\n    title: '',\n    description: '',\n    location: '',\n    priority: '',\n    department: '',\n    assignee: '',\n    dueDate: '',\n    issueType: '',\n    estimatedHours: ''\n  });\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n\n  const handleSelectChange = (name: string, value: string) => {\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    // Here you would typically send the data to your backend\n    console.log('Work Order Data:', formData);\n    \n    // Show success message and redirect\n    alert('Work Order created successfully!');\n    navigate('/work-order');\n  };\n\n  const departments = [\n    { value: 'road', label: 'Road Department' },\n    { value: 'water', label: 'Water Department' },\n    { value: 'electric', label: 'Electric Department' },\n    { value: 'sanitation', label: 'Sanitation Department' }\n  ];\n\n  const assignees = [\n    { value: 'john-smith', label: 'John Smith' },\n    { value: 'sarah-johnson', label: 'Sarah Johnson' },\n    { value: 'mike-davis', label: 'Mike Davis' },\n    { value: 'lisa-brown', label: 'Lisa Brown' }\n  ];\n\n  const priorities = [\n    { value: 'low', label: 'Low' },\n    { value: 'medium', label: 'Medium' },\n    { value: 'high', label: 'High' },\n    { value: 'urgent', label: 'Urgent' }\n  ];\n\n  const issueTypes = [\n    { value: 'pothole', label: 'Pothole' },\n    { value: 'water-leak', label: 'Water Leak' },\n    { value: 'street-light', label: 'Street Light' },\n    { value: 'traffic-signal', label: 'Traffic Signal' },\n    { value: 'trash-collection', label: 'Trash Collection' },\n    { value: 'other', label: 'Other' }\n  ];\n\n  return (\n    <Layout>\n      <div className=\"p-6\">\n        <div className=\"max-w-4xl mx-auto\">\n          {/* Header */}\n          <div className=\"mb-8\">\n            <div className=\"flex items-center gap-4 mb-4\">\n              <Button\n                onClick={() => navigate('/work-order')}\n                variant=\"outline\"\n                className=\"flex items-center gap-2\"\n              >\n                <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 19l-7-7 7-7\" />\n                </svg>\n                Back to Work Orders\n              </Button>\n            </div>\n            <h1 className=\"text-4xl font-bold text-black mb-2\">Create New Work Order</h1>\n            <p className=\"text-xl text-gray-600\">Fill out the details to create a new work assignment</p>\n          </div>\n\n          <Card className=\"bg-white rounded-[15px] border border-solid border-[#b6bdc6] p-8\">\n            <form onSubmit={handleSubmit} className=\"space-y-6\">\n              {/* Basic Information */}\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Work Order Title *\n                  </label>\n                  <Input\n                    name=\"title\"\n                    value={formData.title}\n                    onChange={handleInputChange}\n                    required\n                    className=\"h-12 border-2 border-[#b6bcc5]\"\n                    placeholder=\"Enter work order title\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Location *\n                  </label>\n                  <Input\n                    name=\"location\"\n                    value={formData.location}\n                    onChange={handleInputChange}\n                    required\n                    className=\"h-12 border-2 border-[#b6bcc5]\"\n                    placeholder=\"Enter location address\"\n                  />\n                </div>\n              </div>\n\n              {/* Description */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Description *\n                </label>\n                <textarea\n                  name=\"description\"\n                  value={formData.description}\n                  onChange={handleInputChange}\n                  required\n                  rows={4}\n                  className=\"w-full p-3 border-2 border-[#b6bcc5] rounded-lg resize-none focus:border-[#10b77f] focus:ring-[#10b77f]\"\n                  placeholder=\"Describe the work that needs to be done...\"\n                />\n              </div>\n\n              {/* Assignment Details */}\n              <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Department *\n                  </label>\n                  <Select onValueChange={(value) => handleSelectChange('department', value)}>\n                    <SelectTrigger className=\"h-12 border-2 border-[#b6bcc5]\">\n                      <SelectValue placeholder=\"Select department\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {departments.map((dept) => (\n                        <SelectItem key={dept.value} value={dept.value}>\n                          {dept.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Assign To\n                  </label>\n                  <Select onValueChange={(value) => handleSelectChange('assignee', value)}>\n                    <SelectTrigger className=\"h-12 border-2 border-[#b6bcc5]\">\n                      <SelectValue placeholder=\"Select assignee\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {assignees.map((assignee) => (\n                        <SelectItem key={assignee.value} value={assignee.value}>\n                          {assignee.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Priority *\n                  </label>\n                  <Select onValueChange={(value) => handleSelectChange('priority', value)}>\n                    <SelectTrigger className=\"h-12 border-2 border-[#b6bcc5]\">\n                      <SelectValue placeholder=\"Select priority\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {priorities.map((priority) => (\n                        <SelectItem key={priority.value} value={priority.value}>\n                          {priority.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              {/* Additional Details */}\n              <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Issue Type\n                  </label>\n                  <Select onValueChange={(value) => handleSelectChange('issueType', value)}>\n                    <SelectTrigger className=\"h-12 border-2 border-[#b6bcc5]\">\n                      <SelectValue placeholder=\"Select issue type\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {issueTypes.map((type) => (\n                        <SelectItem key={type.value} value={type.value}>\n                          {type.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Due Date\n                  </label>\n                  <Input\n                    name=\"dueDate\"\n                    type=\"date\"\n                    value={formData.dueDate}\n                    onChange={handleInputChange}\n                    className=\"h-12 border-2 border-[#b6bcc5]\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Estimated Hours\n                  </label>\n                  <Input\n                    name=\"estimatedHours\"\n                    type=\"number\"\n                    value={formData.estimatedHours}\n                    onChange={handleInputChange}\n                    className=\"h-12 border-2 border-[#b6bcc5]\"\n                    placeholder=\"Hours\"\n                    min=\"0\"\n                    step=\"0.5\"\n                  />\n                </div>\n              </div>\n\n              {/* Action Buttons */}\n              <div className=\"flex flex-col sm:flex-row gap-4 pt-6 border-t border-gray-200\">\n                <Button\n                  type=\"submit\"\n                  className=\"bg-[#10b77f] hover:bg-[#0ea06e] text-white font-bold text-lg py-3 px-8 rounded-lg\"\n                >\n                  Create Work Order\n                </Button>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => navigate('/work-order')}\n                  className=\"font-bold text-lg py-3 px-8 rounded-lg\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setFormData({\n                    title: '',\n                    description: '',\n                    location: '',\n                    priority: '',\n                    department: '',\n                    assignee: '',\n                    dueDate: '',\n                    issueType: '',\n                    estimatedHours: ''\n                  })}\n                  className=\"font-bold text-lg py-3 px-8 rounded-lg\"\n                >\n                  Reset Form\n                </Button>\n              </div>\n            </form>\n          </Card>\n        </div>\n      </div>\n    </Layout>\n  );\n};","size_bytes":11161},"frontend/dashboard/src/screens/WorkOrder/WorkOrder.tsx":{"content":"import React from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Layout } from \"../../components/Layout/Layout\";\nimport { Button } from \"../../components/ui/button\";\nimport { Input } from \"../../components/ui/input\";\nimport { Badge } from \"../../components/ui/badge\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"../../components/ui/table\";\n\nexport const WorkOrder = (): JSX.Element => {\n  const navigate = useNavigate();\n\n  const workOrders = [\n    {\n      id: \"WO-001\",\n      title: \"Fix Pothole on Main Street\",\n      assignee: \"John Smith\",\n      department: \"Road\",\n      priority: \"High\",\n      status: \"In Progress\",\n      dueDate: \"2025-01-20\",\n      created: \"2025-01-15\",\n    },\n    {\n      id: \"WO-002\",\n      title: \"Water Leak Repair\",\n      assignee: \"Sarah Johnson\",\n      department: \"Water\",\n      priority: \"Medium\",\n      status: \"Pending\",\n      dueDate: \"2025-01-22\",\n      created: \"2025-01-16\",\n    },\n    {\n      id: \"WO-003\",\n      title: \"Street Light Maintenance\",\n      assignee: \"Mike Davis\",\n      department: \"Electric\",\n      priority: \"Low\",\n      status: \"Completed\",\n      dueDate: \"2025-01-18\",\n      created: \"2025-01-14\",\n    },\n  ];\n\n  return (\n    <Layout>\n      <div className=\"p-6\">\n        <div className=\"flex flex-col gap-6\">\n          {/* Header */}\n          <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4\">\n            <div>\n              <h1 className=\"text-4xl font-bold text-black mb-2\">Work Orders</h1>\n              <p className=\"text-xl text-gray-600\">Manage and track work assignments</p>\n            </div>\n            <Button \n              onClick={() => navigate('/work-order/create')}\n              className=\"bg-[#10b77f] hover:bg-[#0ea06e] text-white font-bold text-xl py-4 px-6 rounded-[15px]\"\n            >\n              Create New Work Order\n            </Button>\n          </div>\n\n          {/* Search and Filters */}\n          <div className=\"flex flex-col lg:flex-row gap-4\">\n            <Input\n              placeholder=\"Search work orders...\"\n              className=\"flex-1 h-[58px] bg-white rounded-[15px] border-2 border-[#b6bcc5] text-xl px-4\"\n            />\n            <Button className=\"bg-[#25abe9] hover:bg-[#2196d3] text-white font-bold text-xl py-4 px-6 rounded-[15px]\">\n              Filter\n            </Button>\n          </div>\n\n          {/* Work Orders Table */}\n          <div className=\"bg-white rounded-[15px] border border-solid border-[#b6bdc6] overflow-hidden\">\n            <Table>\n              <TableHeader>\n                <TableRow className=\"border-b border-[#b6bdc6]\">\n                  <TableHead className=\"px-6 py-4 font-bold text-black text-xl\">Work Order ID</TableHead>\n                  <TableHead className=\"px-4 py-4 font-bold text-black text-xl\">Title</TableHead>\n                  <TableHead className=\"px-4 py-4 font-bold text-black text-xl\">Assignee</TableHead>\n                  <TableHead className=\"px-4 py-4 font-bold text-black text-xl\">Department</TableHead>\n                  <TableHead className=\"px-4 py-4 font-bold text-black text-xl\">Priority</TableHead>\n                  <TableHead className=\"px-4 py-4 font-bold text-black text-xl\">Status</TableHead>\n                  <TableHead className=\"px-4 py-4 font-bold text-black text-xl\">Due Date</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {workOrders.map((order) => (\n                  <TableRow key={order.id} className=\"border-b border-[#b6bdc6] h-[75px]\">\n                    <TableCell className=\"px-6 py-4 font-bold text-black text-lg\">{order.id}</TableCell>\n                    <TableCell className=\"px-4 py-4 text-black text-base\">{order.title}</TableCell>\n                    <TableCell className=\"px-4 py-4 text-black text-base\">{order.assignee}</TableCell>\n                    <TableCell className=\"px-4 py-4\">\n                      <Badge className=\"bg-[#10b77f] text-white\">{order.department}</Badge>\n                    </TableCell>\n                    <TableCell className=\"px-4 py-4\">\n                      <Badge \n                        className={`${\n                          order.priority === 'High' ? 'bg-red-100 text-red-800 border-red-200' :\n                          order.priority === 'Medium' ? 'bg-yellow-100 text-yellow-800 border-yellow-200' :\n                          'bg-green-100 text-green-800 border-green-200'\n                        }`}\n                      >\n                        {order.priority}\n                      </Badge>\n                    </TableCell>\n                    <TableCell className=\"px-4 py-4\">\n                      <Badge \n                        className={`${\n                          order.status === 'Completed' ? 'bg-green-100 text-green-800' :\n                          order.status === 'In Progress' ? 'bg-blue-100 text-blue-800' :\n                          'bg-gray-100 text-gray-800'\n                        }`}\n                      >\n                        {order.status}\n                      </Badge>\n                    </TableCell>\n                    <TableCell className=\"px-4 py-4 text-gray-600 text-base\">{order.dueDate}</TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </div>\n        </div>\n      </div>\n    </Layout>\n  );\n};","size_bytes":5421},"frontend/dashboard/src/components/Layout/ui/avator.tsx":{"content":"\"use client\";\n\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\";\nimport * as React from \"react\";\nimport { cn } from \"../../lib/utils\";\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className,\n    )}\n    {...props}\n  />\n));\nAvatar.displayName = AvatarPrimitive.Root.displayName;\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n));\nAvatarImage.displayName = AvatarPrimitive.Image.displayName;\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className,\n    )}\n    {...props}\n  />\n));\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName;\n\nexport { Avatar, AvatarImage, AvatarFallback };\n","size_bytes":1435},"frontend/dashboard/src/components/Layout/ui/badge.tsx":{"content":"import { type VariantProps, cva } from \"class-variance-authority\";\nimport * as React from \"react\";\nimport { cn } from \"../../lib/utils\";\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n);\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants };\n","size_bytes":1150},"frontend/dashboard/src/components/Layout/ui/button.tsx":{"content":"import { Slot } from \"@radix-ui/react-slot\";\nimport { type VariantProps, cva } from \"class-variance-authority\";\nimport * as React from \"react\";\nimport { cn } from \"../../lib/utils\";\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-8 rounded-md px-3 text-xs\",\n        lg: \"h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n);\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\";\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    );\n  },\n);\nButton.displayName = \"Button\";\n\nexport { Button, buttonVariants };\n","size_bytes":1918},"frontend/dashboard/src/components/Layout/ui/card.tsx":{"content":"import * as React from \"react\";\nimport { cn } from \"../../lib/utils\";\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-xl border bg-card text-card-foreground shadow\",\n      className,\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\";\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\";\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"font-semibold leading-none tracking-tight\", className)}\n    {...props}\n  />\n));\nCardTitle.displayName = \"CardTitle\";\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\";\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n));\nCardContent.displayName = \"CardContent\";\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n));\nCardFooter.displayName = \"CardFooter\";\n\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n};\n","size_bytes":1860},"frontend/dashboard/src/components/Layout/ui/input.tsx":{"content":"import * as React from \"react\";\nimport { cn } from \"../../lib/utils\";\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className,\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  },\n);\nInput.displayName = \"Input\";\n\nexport { Input };\n","size_bytes":779},"frontend/dashboard/src/components/Layout/ui/select.tsx":{"content":"\"use client\";\n\nimport * as SelectPrimitive from \"@radix-ui/react-select\";\nimport { CheckIcon, ChevronDownIcon, ChevronUpIcon } from \"lucide-react\";\nimport * as React from \"react\";\nimport { cn } from \"../../lib/utils\";\n\nconst Select = SelectPrimitive.Root;\n\nconst SelectGroup = SelectPrimitive.Group;\n\nconst SelectValue = SelectPrimitive.Value;\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className,\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDownIcon className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n));\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName;\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className,\n    )}\n    {...props}\n  >\n    <ChevronUpIcon className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n));\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName;\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className,\n    )}\n    {...props}\n  >\n    <ChevronDownIcon className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n));\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName;\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className,\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\",\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n));\nSelectContent.displayName = SelectPrimitive.Content.displayName;\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"px-2 py-1.5 text-sm font-semibold\", className)}\n    {...props}\n  />\n));\nSelectLabel.displayName = SelectPrimitive.Label.displayName;\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className,\n    )}\n    {...props}\n  >\n    <span className=\"absolute right-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <CheckIcon className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n));\nSelectItem.displayName = SelectPrimitive.Item.displayName;\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n));\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName;\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n};\n","size_bytes":5692},"frontend/dashboard/src/components/Layout/ui/table.tsx":{"content":"import * as React from \"react\";\nimport { cn } from \"../../lib/utils\";\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n));\nTable.displayName = \"Table\";\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n));\nTableHeader.displayName = \"TableHeader\";\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n));\nTableBody.displayName = \"TableBody\";\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className,\n    )}\n    {...props}\n  />\n));\nTableFooter.displayName = \"TableFooter\";\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className,\n    )}\n    {...props}\n  />\n));\nTableRow.displayName = \"TableRow\";\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-10 px-2 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\n      className,\n    )}\n    {...props}\n  />\n));\nTableHead.displayName = \"TableHead\";\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\n      \"p-2 align-middle [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\n      className,\n    )}\n    {...props}\n  />\n));\nTableCell.displayName = \"TableCell\";\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nTableCaption.displayName = \"TableCaption\";\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n};\n","size_bytes":2885},"frontend/dashboard/src/components/Layout/ui/tabs.tsx":{"content":"import * as TabsPrimitive from \"@radix-ui/react-tabs\";\nimport * as React from \"react\";\nimport { cn } from \"../../lib/utils\";\n\nconst Tabs = TabsPrimitive.Root;\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-9 items-center justify-center rounded-lg bg-muted p-1 text-muted-foreground\",\n      className,\n    )}\n    {...props}\n  />\n));\nTabsList.displayName = TabsPrimitive.List.displayName;\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow\",\n      className,\n    )}\n    {...props}\n  />\n));\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName;\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className,\n    )}\n    {...props}\n  />\n));\nTabsContent.displayName = TabsPrimitive.Content.displayName;\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent };\n","size_bytes":1894},"frontend/dashboard/src/screens/Dashboard/sections/AnalyticsView/AnalyticsView.tsx":{"content":"import React from \"react\";\n\nexport const AnalyticsView = (): JSX.Element => {\n  const stats = [\n    { label: \"Total Issues\", value: \"1,247\", change: \"+12%\", color: \"text-blue-600\" },\n    { label: \"Resolved\", value: \"892\", change: \"+8%\", color: \"text-green-600\" },\n    { label: \"In Progress\", value: \"234\", change: \"+15%\", color: \"text-yellow-600\" },\n    { label: \"Pending\", value: \"121\", change: \"-3%\", color: \"text-red-600\" },\n  ];\n\n  const departmentStats = [\n    { name: \"Road Department\", issues: 456, resolved: 312 },\n    { name: \"Water Department\", issues: 234, resolved: 189 },\n    { name: \"Electric Department\", issues: 189, resolved: 156 },\n    { name: \"Sanitation\", issues: 156, resolved: 134 },\n  ];\n\n  return (\n    <div className=\"w-full space-y-6\">\n      {/* Key Metrics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        {stats.map((stat, index) => (\n          <div key={index} className=\"bg-white rounded-[15px] border border-solid border-[#b6bdc6] p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">{stat.label}</p>\n                <p className=\"text-3xl font-bold text-gray-900\">{stat.value}</p>\n              </div>\n              <div className={`text-sm font-medium ${stat.color}`}>\n                {stat.change}\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n\n      {/* Charts Section */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Issues by Department */}\n        <div className=\"bg-white rounded-[15px] border border-solid border-[#b6bdc6] p-6\">\n          <h3 className=\"text-xl font-bold text-gray-900 mb-4\">Issues by Department</h3>\n          <div className=\"space-y-4\">\n            {departmentStats.map((dept, index) => (\n              <div key={index} className=\"flex items-center justify-between\">\n                <div className=\"flex-1\">\n                  <div className=\"flex justify-between items-center mb-1\">\n                    <span className=\"text-sm font-medium text-gray-700\">{dept.name}</span>\n                    <span className=\"text-sm text-gray-500\">{dept.resolved}/{dept.issues}</span>\n                  </div>\n                  <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                    <div \n                      className=\"bg-[#10b77f] h-2 rounded-full\" \n                      style={{ width: `${(dept.resolved / dept.issues) * 100}%` }}\n                    ></div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Response Time Trends */}\n        <div className=\"bg-white rounded-[15px] border border-solid border-[#b6bdc6] p-6\">\n          <h3 className=\"text-xl font-bold text-gray-900 mb-4\">Response Time Trends</h3>\n          <div className=\"flex items-center justify-center h-[200px] bg-gray-50 rounded-lg\">\n            <div className=\"text-center\">\n              <div className=\"w-12 h-12 bg-[#25abe9] rounded-full flex items-center justify-center mb-3 mx-auto\">\n                <svg className=\"w-6 h-6 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\" />\n                </svg>\n              </div>\n              <p className=\"text-gray-600\">Interactive charts showing response time trends over time</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Priority Distribution */}\n      <div className=\"bg-white rounded-[15px] border border-solid border-[#b6bdc6] p-6\">\n        <h3 className=\"text-xl font-bold text-gray-900 mb-4\">Issue Priority Distribution</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <div className=\"text-center p-4 bg-red-50 rounded-lg\">\n            <div className=\"text-2xl font-bold text-red-600\">23%</div>\n            <div className=\"text-sm text-red-700\">High Priority</div>\n          </div>\n          <div className=\"text-center p-4 bg-yellow-50 rounded-lg\">\n            <div className=\"text-2xl font-bold text-yellow-600\">45%</div>\n            <div className=\"text-sm text-yellow-700\">Medium Priority</div>\n          </div>\n          <div className=\"text-center p-4 bg-green-50 rounded-lg\">\n            <div className=\"text-2xl font-bold text-green-600\">32%</div>\n            <div className=\"text-sm text-green-700\">Low Priority</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};","size_bytes":4744},"frontend/dashboard/src/screens/Dashboard/sections/DashboardStatsSection/DashboardStatsSection.tsx":{"content":"import { useNavigate } from \"react-router-dom\";\n\nimport { Button } from \"../../../../components/ui/button\";\nimport { Input } from \"../../../../components/ui/input\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"../../../../components/ui/select\";\n\nexport const DashboardStatsSection = (): JSX.Element => {\n  const navigate = useNavigate();\n\n  const filterOptions = [\n    { label: \"All Type\", value: \"all-type\" },\n    { label: \"All Priorities\", value: \"all-priorities\" },\n    { label: \"All Status\", value: \"all-status\" },\n    { label: \"All Area\", value: \"all-area\" },\n  ];\n\n  return (\n    <section className=\"w-full\">\n      <div className=\"flex flex-col gap-6\">\n        {/* Header section with title and action buttons */}\n        <div className=\"flex flex-col lg:flex-row lg:items-start lg:justify-between gap-4\">\n          <div className=\"flex-1\">\n            <h1 className=\"[font-family:'Inter',Helvetica] font-bold text-black text-3xl lg:text-5xl tracking-[0] leading-[normal] mb-4\">\n              City Issue Dashboard\n            </h1>\n            <p className=\"[font-family:'Inter',Helvetica] font-normal text-[#000000b2] text-xl tracking-[0] leading-[normal]\">\n              Monitor, triage, and resolve citizen reports in real time.\n            </p>\n          </div>\n\n          <div className=\"flex flex-col sm:flex-row gap-3 lg:mt-2\">\n            <Button className=\"bg-[#10b77f] hover:bg-[#0ea06e] text-white font-bold text-xl h-auto py-4 px-4 rounded-[15px] border-2 border-[#b6bcc5] min-w-[182px]\">\n              Auto Route All\n            </Button>\n            <Button \n              onClick={() => navigate('/work-order/create')}\n              className=\"bg-[#25abe9] hover:bg-[#2196d3] text-white font-bold text-xl h-auto py-4 px-4 rounded-[15px] border-2 border-[#b6bcc5] min-w-[194px]\"\n            >\n              New Work Order\n            </Button>\n          </div>\n        </div>\n\n        {/* Search and filters section */}\n        <div className=\"flex flex-col gap-4\">\n          <div className=\"flex flex-col lg:flex-row gap-4\">\n            <div className=\"flex-1 lg:max-w-[402px]\">\n              <Input\n                placeholder=\"Search Address, title...\"\n                className=\"h-[58px] bg-white rounded-[15px] border-2 border-[#b6bcc5] [font-family:'Inter',Helvetica] font-light text-[#00000080] text-2xl px-4\"\n                defaultValue=\"\"\n              />\n            </div>\n\n            <div className=\"flex flex-col sm:flex-row gap-4 lg:flex-1\">\n              {filterOptions.map((option, index) => (\n                <Select key={option.value}>\n                  <SelectTrigger className=\"h-[58px] bg-white rounded-[15px] border-2 border-[#b6bcc5] [font-family:'Inter',Helvetica] font-light text-black text-2xl px-4 min-w-[140px]\">\n                    <SelectValue placeholder={option.label} />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"option1\">Option 1</SelectItem>\n                    <SelectItem value=\"option2\">Option 2</SelectItem>\n                    <SelectItem value=\"option3\">Option 3</SelectItem>\n                  </SelectContent>\n                </Select>\n              ))}\n            </div>\n          </div>\n\n          <div className=\"flex justify-start\">\n            <Button className=\"bg-[#10b77f] hover:bg-[#0ea06e] text-white font-bold text-2xl h-auto py-4 px-16 rounded-[7px] min-w-[192px]\">\n              Reset\n            </Button>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n","size_bytes":3564},"frontend/dashboard/src/screens/Dashboard/sections/IssueListSection/IssueListSection.tsx":{"content":"import React from \"react\";\nimport { Badge } from \"../../../../components/ui/badge\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"../../../../components/ui/select\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"../../../../components/ui/table\";\n\nconst issueData = [\n  {\n    id: 1,\n    title: \"Pothole on road\",\n    location: \"Eve Road\",\n    type: \"Pothole\",\n    priority: \"High\",\n    area: \"East wood\",\n    department: \"Road\",\n    status: \"Resolved\",\n    created: \"16/9/2025,\\n7:13:33 am\",\n  },\n  {\n    id: 2,\n    title: \"Pothole on road\",\n    location: \"Eve Road\",\n    type: \"Pothole\",\n    priority: \"High\",\n    area: \"East wood\",\n    department: \"Road\",\n    status: \"Resolved\",\n    created: \"16/9/2025,\\n7:13:33 am\",\n  },\n  {\n    id: 3,\n    title: \"Pothole on road\",\n    location: \"Eve Road\",\n    type: \"Pothole\",\n    priority: \"High\",\n    area: \"East wood\",\n    department: \"Road\",\n    status: \"Resolved\",\n    created: \"16/9/2025,\\n7:13:33 am\",\n  },\n  {\n    id: 4,\n    title: \"Pothole on road\",\n    location: \"Eve Road\",\n    type: \"Pothole\",\n    priority: \"High\",\n    area: \"East wood\",\n    department: \"Road\",\n    status: \"Resolved\",\n    created: \"16/9/2025,\\n7:13:33 am\",\n  },\n  {\n    id: 5,\n    title: \"Pothole on road\",\n    location: \"Eve Road\",\n    type: \"Pothole\",\n    priority: \"High\",\n    area: \"East wood\",\n    department: \"Road\",\n    status: \"Resolved\",\n    created: \"16/9/2025,\\n7:13:33 am\",\n  },\n  {\n    id: 6,\n    title: \"Pothole on road\",\n    location: \"Eve Road\",\n    type: \"Pothole\",\n    priority: \"High\",\n    area: \"East wood\",\n    department: \"Road\",\n    status: \"Resolved\",\n    created: \"16/9/2025,\\n7:13:33 am\",\n  },\n  {\n    id: 7,\n    title: \"Pothole on road\",\n    location: \"Eve Road\",\n    type: \"Pothole\",\n    priority: \"High\",\n    area: \"East wood\",\n    department: \"Road\",\n    status: \"Resolved\",\n    created: \"16/9/2025,\\n7:13:33 am\",\n  },\n  {\n    id: 8,\n    title: \"Pothole on road\",\n    location: \"Eve Road\",\n    type: \"Pothole\",\n    priority: \"High\",\n    area: \"East wood\",\n    department: \"Road\",\n    status: \"Resolved\",\n    created: \"16/9/2025,\\n7:13:33 am\",\n  },\n  {\n    id: 9,\n    title: \"Pothole on road\",\n    location: \"Eve Road\",\n    type: \"Pothole\",\n    priority: \"High\",\n    area: \"East wood\",\n    department: \"Road\",\n    status: \"Resolved\",\n    created: \"16/9/2025,\\n7:13:33 am\",\n  },\n  {\n    id: 10,\n    title: \"Pothole on road\",\n    location: \"Eve Road\",\n    type: \"Pothole\",\n    priority: \"High\",\n    area: \"East wood\",\n    department: \"Road\",\n    status: \"Resolved\",\n    created: \"16/9/2025,\\n7:13:33 am\",\n  },\n  {\n    id: 11,\n    title: \"Pothole on road\",\n    location: \"Eve Road\",\n    type: \"Pothole\",\n    priority: \"High\",\n    area: \"East wood\",\n    department: \"Road\",\n    status: \"Resolved\",\n    created: \"16/9/2025,\\n7:13:33 am\",\n  },\n  {\n    id: 12,\n    title: \"Pothole on road\",\n    location: \"Eve Road\",\n    type: \"Pothole\",\n    priority: \"High\",\n    area: \"East wood\",\n    department: \"Road\",\n    status: \"Resolved\",\n    created: \"16/9/2025,\\n7:13:33 am\",\n  },\n];\n\nexport const IssueListSection = (): JSX.Element => {\n  return (\n    <div className=\"w-full bg-white rounded-[15px] border border-solid border-[#b6bdc6] overflow-hidden\">\n      <Table>\n        <TableHeader>\n          <TableRow className=\"border-b border-[#b6bdc6]\">\n            <TableHead className=\"px-[29px] py-[22px] [font-family:'Inter',Helvetica] font-bold text-[#000000b2] text-2xl tracking-[0] leading-[normal]\">\n              Issue\n            </TableHead>\n            <TableHead className=\"px-4 py-[22px] [font-family:'Inter',Helvetica] font-bold text-[#000000b2] text-2xl tracking-[0] leading-[normal]\">\n              Type\n            </TableHead>\n            <TableHead className=\"px-4 py-[22px] [font-family:'Inter',Helvetica] font-bold text-[#000000b2] text-2xl tracking-[0] leading-[normal]\">\n              Priority\n            </TableHead>\n            <TableHead className=\"px-4 py-[22px] [font-family:'Inter',Helvetica] font-bold text-[#000000b2] text-2xl tracking-[0] leading-[normal]\">\n              Area\n            </TableHead>\n            <TableHead className=\"px-4 py-[22px] [font-family:'Inter',Helvetica] font-bold text-[#000000b2] text-2xl tracking-[0] leading-[normal]\">\n              Department\n            </TableHead>\n            <TableHead className=\"px-4 py-[22px] [font-family:'Inter',Helvetica] font-bold text-[#000000b2] text-2xl tracking-[0] leading-[normal]\">\n              Status\n            </TableHead>\n            <TableHead className=\"px-4 py-[22px] [font-family:'Inter',Helvetica] font-bold text-[#000000b2] text-2xl tracking-[0] leading-[normal]\">\n              Created\n            </TableHead>\n          </TableRow>\n        </TableHeader>\n        <TableBody>\n          {issueData.map((issue, index) => (\n            <TableRow\n              key={issue.id}\n              className=\"border-b border-[#b6bdc6] h-[75px]\"\n            >\n              <TableCell className=\"px-[29px] py-4\">\n                <div className=\"flex flex-col\">\n                  <div className=\"[font-family:'Inter',Helvetica] font-bold text-black text-2xl tracking-[0] leading-[normal]\">\n                    {issue.title}\n                  </div>\n                  <div className=\"[font-family:'Inter',Helvetica] font-normal text-black text-base tracking-[0] leading-[normal] whitespace-nowrap\">\n                    {issue.location}\n                  </div>\n                </div>\n              </TableCell>\n              <TableCell className=\"px-4 py-4\">\n                <Badge className=\"bg-[#10b77f] hover:bg-[#10b77f] text-white rounded-[22px] px-2 py-2.5 h-[39px] w-[78px] flex items-center justify-center [font-family:'Inter',Helvetica] font-bold text-base tracking-[0] leading-[normal]\">\n                  {issue.type}\n                </Badge>\n              </TableCell>\n              <TableCell className=\"px-4 py-4\">\n                <Badge className=\"bg-[#f8ede4] hover:bg-[#f8ede4] text-[#cc410c] border-2 border-solid border-[#fed8ad] rounded-[22px] px-2 py-2.5 h-[39px] w-[78px] flex items-center justify-center [font-family:'Inter',Helvetica] font-bold text-base tracking-[0] leading-[normal]\">\n                  {issue.priority}\n                </Badge>\n              </TableCell>\n              <TableCell className=\"px-4 py-4\">\n                <div className=\"[font-family:'Inter',Helvetica] font-normal text-black text-base tracking-[0] leading-[normal] whitespace-nowrap\">\n                  {issue.area}\n                </div>\n              </TableCell>\n              <TableCell className=\"px-4 py-4\">\n                <Select defaultValue={issue.department}>\n                  <SelectTrigger className=\"w-40 h-[45px] bg-white rounded-[11px] border-2 border-solid border-[#b6bdc6] [font-family:'Inter',Helvetica] font-bold text-black text-xl tracking-[0] leading-[normal]\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"Road\">Road</SelectItem>\n                    <SelectItem value=\"Water\">Water</SelectItem>\n                    <SelectItem value=\"Electric\">Electric</SelectItem>\n                  </SelectContent>\n                </Select>\n              </TableCell>\n              <TableCell className=\"px-4 py-4\">\n                <Select defaultValue={issue.status}>\n                  <SelectTrigger className=\"w-40 h-[45px] bg-white rounded-[11px] border-2 border-solid border-[#b6bdc6] [font-family:'Inter',Helvetica] font-bold text-black text-xl tracking-[0] leading-[normal]\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"Resolved\">Resolved</SelectItem>\n                    <SelectItem value=\"Pending\">Pending</SelectItem>\n                    <SelectItem value=\"In Progress\">In Progress</SelectItem>\n                  </SelectContent>\n                </Select>\n              </TableCell>\n              <TableCell className=\"px-4 py-4\">\n                <div className=\"[font-family:'Inter',Helvetica] font-normal text-[#000000b2] text-[15px] tracking-[0] leading-[normal] whitespace-pre-line\">\n                  {issue.created}\n                </div>\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </div>\n  );\n};\n","size_bytes":8414},"frontend/dashboard/src/screens/Dashboard/sections/MapView/MapView.tsx":{"content":"import React from \"react\";\n\nexport const MapView = (): JSX.Element => {\n  return (\n    <div className=\"w-full bg-white rounded-[15px] border border-solid border-[#b6bdc6] p-8\">\n      <div className=\"flex flex-col items-center justify-center h-[600px] bg-gray-50 rounded-lg\">\n        <div className=\"w-16 h-16 bg-[#10b77f] rounded-full flex items-center justify-center mb-4\">\n          <svg className=\"w-8 h-8 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z\" />\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 11a3 3 0 11-6 0 3 3 0 016 0z\" />\n          </svg>\n        </div>\n        <h3 className=\"text-2xl font-bold text-gray-800 mb-2\">Interactive Map View</h3>\n        <p className=\"text-gray-600 text-center max-w-md\">\n          This would display an interactive map showing all reported issues with their locations, \n          status indicators, and clickable markers for detailed information.\n        </p>\n        <div className=\"mt-6 grid grid-cols-3 gap-4 text-sm\">\n          <div className=\"flex items-center\">\n            <div className=\"w-3 h-3 bg-red-500 rounded-full mr-2\"></div>\n            <span>High Priority</span>\n          </div>\n          <div className=\"flex items-center\">\n            <div className=\"w-3 h-3 bg-yellow-500 rounded-full mr-2\"></div>\n            <span>Medium Priority</span>\n          </div>\n          <div className=\"flex items-center\">\n            <div className=\"w-3 h-3 bg-green-500 rounded-full mr-2\"></div>\n            <span>Resolved</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};","size_bytes":1767}},"version":1}